
pygame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  080086a0  080086a0  000096a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  0000a09c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a70  08008a70  00009a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a78  08008a78  0000a09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a78  08008a78  00009a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a7c  08008a7c  00009a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08008a80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  2000009c  08008b1c  0000a09c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08008b1c  0000a52c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e03  00000000  00000000  0000a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039c2  00000000  00000000  00021ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00025890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f08  00000000  00000000  00026bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002abd0  00000000  00000000  00027b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b42c  00000000  00000000  000526d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104694  00000000  00000000  0006dafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172190  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005570  00000000  00000000  001721d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00177744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000009c 	.word	0x2000009c
 800021c:	00000000 	.word	0x00000000
 8000220:	08008688 	.word	0x08008688

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000a0 	.word	0x200000a0
 800023c:	08008688 	.word	0x08008688

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b28      	ldr	r3, [pc, #160]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000620:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <MX_ADC1_Init+0xb8>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000626:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000634:	2201      	movs	r2, #1
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800064e:	4a1e      	ldr	r2, [pc, #120]	@ (80006c8 <MX_ADC1_Init+0xbc>)
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800065a:	2202      	movs	r2, #2
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4814      	ldr	r0, [pc, #80]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800066e:	f001 fe5d 	bl	800232c <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fcec 	bl	8001054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800067c:	2305      	movs	r3, #5
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000684:	2304      	movs	r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 800068e:	f002 f8bd 	bl	800280c <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fcdc 	bl	8001054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800069c:	2306      	movs	r3, #6
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_ADC1_Init+0xb4>)
 80006aa:	f002 f8af 	bl	800280c <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006b4:	f000 fcce 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000b8 	.word	0x200000b8
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a31      	ldr	r2, [pc, #196]	@ (80007b0 <HAL_ADC_MspInit+0xe4>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d15c      	bne.n	80007a8 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ee:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 80006f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006f2:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 80006f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	@ 0x30
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <HAL_ADC_MspInit+0xe8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800071e:	2360      	movs	r3, #96	@ 0x60
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	4821      	ldr	r0, [pc, #132]	@ (80007b8 <HAL_ADC_MspInit+0xec>)
 8000732:	f003 f867 	bl	8003804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <HAL_ADC_MspInit+0xf4>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800073c:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000754:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000758:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800075c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000760:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000764:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000770:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000774:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077c:	480f      	ldr	r0, [pc, #60]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 800077e:	f002 fc37 	bl	8002ff0 <HAL_DMA_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000788:	f000 fc64 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a0b      	ldr	r2, [pc, #44]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000790:	639a      	str	r2, [r3, #56]	@ 0x38
 8000792:	4a0a      	ldr	r2, [pc, #40]	@ (80007bc <HAL_ADC_MspInit+0xf0>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2102      	movs	r1, #2
 800079c:	2012      	movs	r0, #18
 800079e:	f002 fbf0 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80007a2:	2012      	movs	r0, #18
 80007a4:	f002 fc09 	bl	8002fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	20000100 	.word	0x20000100
 80007c0:	40026410 	.word	0x40026410

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_DMA_Init+0x38>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a0b      	ldr	r2, [pc, #44]	@ (80007fc <MX_DMA_Init+0x38>)
 80007d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_DMA_Init+0x38>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2038      	movs	r0, #56	@ 0x38
 80007e8:	f002 fbcb 	bl	8002f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007ec:	2038      	movs	r0, #56	@ 0x38
 80007ee:	f002 fbe4 	bl	8002fba <HAL_NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800

08000800 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	@ 0x30
 8000804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000816:	4b57      	ldr	r3, [pc, #348]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a56      	ldr	r2, [pc, #344]	@ (8000974 <MX_GPIO_Init+0x174>)
 800081c:	f043 0310 	orr.w	r3, r3, #16
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b54      	ldr	r3, [pc, #336]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0310 	and.w	r3, r3, #16
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4b51      	ldr	r3, [pc, #324]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a50      	ldr	r2, [pc, #320]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b4e      	ldr	r3, [pc, #312]	@ (8000974 <MX_GPIO_Init+0x174>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b4b      	ldr	r3, [pc, #300]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a4a      	ldr	r2, [pc, #296]	@ (8000974 <MX_GPIO_Init+0x174>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b48      	ldr	r3, [pc, #288]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b45      	ldr	r3, [pc, #276]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a44      	ldr	r2, [pc, #272]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b42      	ldr	r3, [pc, #264]	@ (8000974 <MX_GPIO_Init+0x174>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b3f      	ldr	r3, [pc, #252]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a3e      	ldr	r2, [pc, #248]	@ (8000974 <MX_GPIO_Init+0x174>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b3c      	ldr	r3, [pc, #240]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a38      	ldr	r2, [pc, #224]	@ (8000974 <MX_GPIO_Init+0x174>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b36      	ldr	r3, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x174>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2168      	movs	r1, #104	@ 0x68
 80008aa:	4833      	ldr	r0, [pc, #204]	@ (8000978 <MX_GPIO_Init+0x178>)
 80008ac:	f003 f96e 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_6|CS_Pin|DC_Pin
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 61e9 	mov.w	r1, #1864	@ 0x748
 80008b6:	4831      	ldr	r0, [pc, #196]	@ (800097c <MX_GPIO_Init+0x17c>)
 80008b8:	f003 f968 	bl	8003b8c <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c2:	482f      	ldr	r0, [pc, #188]	@ (8000980 <MX_GPIO_Init+0x180>)
 80008c4:	f003 f962 	bl	8003b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_IRQ_Pin T_MISO_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80008c8:	2314      	movs	r3, #20
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4827      	ldr	r0, [pc, #156]	@ (8000978 <MX_GPIO_Init+0x178>)
 80008dc:	f002 ff92 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_MOSI_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80008e0:	2368      	movs	r3, #104	@ 0x68
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4820      	ldr	r0, [pc, #128]	@ (8000978 <MX_GPIO_Init+0x178>)
 80008f8:	f002 ff84 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000904:	2301      	movs	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	481b      	ldr	r0, [pc, #108]	@ (800097c <MX_GPIO_Init+0x17c>)
 8000910:	f002 ff78 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000914:	2348      	movs	r3, #72	@ 0x48
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4814      	ldr	r0, [pc, #80]	@ (800097c <MX_GPIO_Init+0x17c>)
 800092c:	f002 ff6a 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000930:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_GPIO_Init+0x180>)
 800094a:	f002 ff5b 	bl	8003804 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin DC_Pin RST_Pin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 800094e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_GPIO_Init+0x17c>)
 8000968:	f002 ff4c 	bl	8003804 <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	@ 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020400 	.word	0x40020400

08000984 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000988:	f3bf 8f4f 	dsb	sy
}
 800098c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800098e:	f3bf 8f6f 	isb	sy
}
 8000992:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000994:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <SCB_EnableICache+0x48>)
 8000996:	2200      	movs	r2, #0
 8000998:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800099c:	f3bf 8f4f 	dsb	sy
}
 80009a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009a2:	f3bf 8f6f 	isb	sy
}
 80009a6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009a8:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <SCB_EnableICache+0x48>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a07      	ldr	r2, [pc, #28]	@ (80009cc <SCB_EnableICache+0x48>)
 80009ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009b4:	f3bf 8f4f 	dsb	sy
}
 80009b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009ba:	f3bf 8f6f 	isb	sy
}
 80009be:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <SCB_EnableDCache+0x84>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <SCB_EnableDCache+0x84>)
 80009e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80009ea:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	0b5b      	lsrs	r3, r3, #13
 80009f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009f4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	08db      	lsrs	r3, r3, #3
 80009fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009fe:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	015a      	lsls	r2, r3, #5
 8000a04:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000a08:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a0e:	4911      	ldr	r1, [pc, #68]	@ (8000a54 <SCB_EnableDCache+0x84>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	1e5a      	subs	r2, r3, #1
 8000a1a:	60ba      	str	r2, [r7, #8]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d1ef      	bne.n	8000a00 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	60fa      	str	r2, [r7, #12]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1e5      	bne.n	80009f6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a2a:	f3bf 8f4f 	dsb	sy
}
 8000a2e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <SCB_EnableDCache+0x84>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <SCB_EnableDCache+0x84>)
 8000a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a3a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3c:	f3bf 8f4f 	dsb	sy
}
 8000a40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a42:	f3bf 8f6f 	isb	sy
}
 8000a46:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b092      	sub	sp, #72	@ 0x48
 8000a5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a5e:	f7ff ff91 	bl	8000984 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a62:	f7ff ffb5 	bl	80009d0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a66:	f001 fbd1 	bl	800220c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6a:	f000 f9bb 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6e:	f7ff fec7 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a72:	f7ff fea7 	bl	80007c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a76:	f000 fda9 	bl	80015cc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000a7a:	f7ff fdc7 	bl	800060c <MX_ADC1_Init>
  MX_RNG_Init();
 8000a7e:	f000 faef 	bl	8001060 <MX_RNG_Init>
  MX_SPI5_Init();
 8000a82:	f000 fb35 	bl	80010f0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000a86:	f000 fc6f 	bl	8001368 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a8a:	f000 fcc1 	bl	8001410 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();
 8000a8e:	f001 f8b5 	bl	8001bfc <ILI9341_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)readValue, 2);
 8000a92:	2202      	movs	r2, #2
 8000a94:	49b7      	ldr	r1, [pc, #732]	@ (8000d74 <main+0x31c>)
 8000a96:	48b8      	ldr	r0, [pc, #736]	@ (8000d78 <main+0x320>)
 8000a98:	f001 fd9c 	bl	80025d4 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart3, &byte, 1);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	49b7      	ldr	r1, [pc, #732]	@ (8000d7c <main+0x324>)
 8000aa0:	48b7      	ldr	r0, [pc, #732]	@ (8000d80 <main+0x328>)
 8000aa2:	f005 fe26 	bl	80066f2 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000aa6:	210c      	movs	r1, #12
 8000aa8:	48b6      	ldr	r0, [pc, #728]	@ (8000d84 <main+0x32c>)
 8000aaa:	f004 fe21 	bl	80056f0 <HAL_TIM_PWM_Start>


  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000aae:	2003      	movs	r0, #3
 8000ab0:	f001 f846 	bl	8001b40 <ILI9341_Set_Rotation>
//  ILI9341_Draw_Text("Treasure Hunt Ready!", 10, 10, WHITE, 2, BLACK);
//  ILI9341_Draw_Text("Food: 0", 10, 40, GREEN, 2, BLACK);
//  ILI9341_Draw_Text("Energy: 100", 10, 70, YELLOW, 2, BLACK);

  // Draw dashboard frame
  ILI9341_Fill_Screen(BLACK);
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f001 fa4d 	bl	8001f54 <ILI9341_Fill_Screen>

  // Title
  ILI9341_Draw_Text("Treasure Hunt", 10, 10, WHITE, 2, BLACK);
 8000aba:	2300      	movs	r3, #0
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	2302      	movs	r3, #2
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ac6:	220a      	movs	r2, #10
 8000ac8:	210a      	movs	r1, #10
 8000aca:	48af      	ldr	r0, [pc, #700]	@ (8000d88 <main+0x330>)
 8000acc:	f000 ff38 	bl	8001940 <ILI9341_Draw_Text>

  // Food Box
  ILI9341_Draw_Filled_Rectangle_Coord(10, 40, 310, 70, DARKGREEN);
 8000ad0:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2346      	movs	r3, #70	@ 0x46
 8000ad8:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000adc:	2128      	movs	r1, #40	@ 0x28
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f000 fe35 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
  ILI9341_Draw_Text("Food: 0", 15, 45, WHITE, 2, DARKGREEN);
 8000ae4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	2302      	movs	r3, #2
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000af2:	222d      	movs	r2, #45	@ 0x2d
 8000af4:	210f      	movs	r1, #15
 8000af6:	48a5      	ldr	r0, [pc, #660]	@ (8000d8c <main+0x334>)
 8000af8:	f000 ff22 	bl	8001940 <ILI9341_Draw_Text>

  // Energy Box
  ILI9341_Draw_Filled_Rectangle_Coord(10, 75, 310, 105, DARKYELLOW);
 8000afc:	f249 43a0 	movw	r3, #38048	@ 0x94a0
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2369      	movs	r3, #105	@ 0x69
 8000b04:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000b08:	214b      	movs	r1, #75	@ 0x4b
 8000b0a:	200a      	movs	r0, #10
 8000b0c:	f000 fe1f 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
  ILI9341_Draw_Text("Energy: 100", 15, 80, WHITE, 2, DARKYELLOW);
 8000b10:	f249 43a0 	movw	r3, #38048	@ 0x94a0
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	2302      	movs	r3, #2
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b1e:	2250      	movs	r2, #80	@ 0x50
 8000b20:	210f      	movs	r1, #15
 8000b22:	489b      	ldr	r0, [pc, #620]	@ (8000d90 <main+0x338>)
 8000b24:	f000 ff0c 	bl	8001940 <ILI9341_Draw_Text>

  // Status Box
  ILI9341_Draw_Filled_Rectangle_Coord(10, 110, 310, 140, DARKCYAN);
 8000b28:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	238c      	movs	r3, #140	@ 0x8c
 8000b30:	f44f 729b 	mov.w	r2, #310	@ 0x136
 8000b34:	216e      	movs	r1, #110	@ 0x6e
 8000b36:	200a      	movs	r0, #10
 8000b38:	f000 fe09 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
  ILI9341_Draw_Text("Status: Ready", 15, 115, WHITE, 2, DARKCYAN);
 8000b3c:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	2302      	movs	r3, #2
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b4a:	2273      	movs	r2, #115	@ 0x73
 8000b4c:	210f      	movs	r1, #15
 8000b4e:	4891      	ldr	r0, [pc, #580]	@ (8000d94 <main+0x33c>)
 8000b50:	f000 fef6 	bl	8001940 <ILI9341_Draw_Text>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (command_ready) {
 8000b54:	4b90      	ldr	r3, [pc, #576]	@ (8000d98 <main+0x340>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d059      	beq.n	8000c12 <main+0x1ba>
	       // Echo back for testing with clear formatting
	       HAL_UART_Transmit(&huart3, echo_buffer, command_length, 100);
 8000b5e:	4b8f      	ldr	r3, [pc, #572]	@ (8000d9c <main+0x344>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	2364      	movs	r3, #100	@ 0x64
 8000b68:	498d      	ldr	r1, [pc, #564]	@ (8000da0 <main+0x348>)
 8000b6a:	4885      	ldr	r0, [pc, #532]	@ (8000d80 <main+0x328>)
 8000b6c:	f005 fd38 	bl	80065e0 <HAL_UART_Transmit>
	       char buffer[50];
	       // Update Food value
	          ILI9341_Draw_Filled_Rectangle_Coord(80, 45, 220, 65, DARKGREEN);
 8000b70:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2341      	movs	r3, #65	@ 0x41
 8000b78:	22dc      	movs	r2, #220	@ 0xdc
 8000b7a:	212d      	movs	r1, #45	@ 0x2d
 8000b7c:	2050      	movs	r0, #80	@ 0x50
 8000b7e:	f000 fde6 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
	          sprintf(buffer, "%d", food_count);
 8000b82:	4b88      	ldr	r3, [pc, #544]	@ (8000da4 <main+0x34c>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4987      	ldr	r1, [pc, #540]	@ (8000da8 <main+0x350>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 f8d4 	bl	8007d38 <siprintf>
	          ILI9341_Draw_Text(buffer, 80, 45, GREEN, 2, DARKGREEN);
 8000b90:	1d38      	adds	r0, r7, #4
 8000b92:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	2302      	movs	r3, #2
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000ba0:	222d      	movs	r2, #45	@ 0x2d
 8000ba2:	2150      	movs	r1, #80	@ 0x50
 8000ba4:	f000 fecc 	bl	8001940 <ILI9341_Draw_Text>

	          // Update Energy value
	          ILI9341_Draw_Filled_Rectangle_Coord(90, 80, 220, 100, DARKYELLOW);
 8000ba8:	f249 43a0 	movw	r3, #38048	@ 0x94a0
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2364      	movs	r3, #100	@ 0x64
 8000bb0:	22dc      	movs	r2, #220	@ 0xdc
 8000bb2:	2150      	movs	r1, #80	@ 0x50
 8000bb4:	205a      	movs	r0, #90	@ 0x5a
 8000bb6:	f000 fdca 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
	          sprintf(buffer, "%d", energy_level);
 8000bba:	4b7c      	ldr	r3, [pc, #496]	@ (8000dac <main+0x354>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4979      	ldr	r1, [pc, #484]	@ (8000da8 <main+0x350>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f007 f8b8 	bl	8007d38 <siprintf>
	          ILI9341_Draw_Text(buffer, 100, 80, YELLOW, 2, DARKYELLOW);
 8000bc8:	1d38      	adds	r0, r7, #4
 8000bca:	f249 43a0 	movw	r3, #38048	@ 0x94a0
 8000bce:	9301      	str	r3, [sp, #4]
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	9300      	str	r3, [sp, #0]
 8000bd4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000bd8:	2250      	movs	r2, #80	@ 0x50
 8000bda:	2164      	movs	r1, #100	@ 0x64
 8000bdc:	f000 feb0 	bl	8001940 <ILI9341_Draw_Text>

	          // Update Status
	          ILI9341_Draw_Filled_Rectangle_Coord(90, 115, 300, 135, DARKCYAN);
 8000be0:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2387      	movs	r3, #135	@ 0x87
 8000be8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000bec:	2173      	movs	r1, #115	@ 0x73
 8000bee:	205a      	movs	r0, #90	@ 0x5a
 8000bf0:	f000 fdad 	bl	800174e <ILI9341_Draw_Filled_Rectangle_Coord>
	          ILI9341_Draw_Text(status_msg, 100, 115, CYAN, 2, DARKCYAN);
 8000bf4:	f240 33ef 	movw	r3, #1007	@ 0x3ef
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c02:	2273      	movs	r2, #115	@ 0x73
 8000c04:	2164      	movs	r1, #100	@ 0x64
 8000c06:	486a      	ldr	r0, [pc, #424]	@ (8000db0 <main+0x358>)
 8000c08:	f000 fe9a 	bl	8001940 <ILI9341_Draw_Text>
	       command_ready = 0;
 8000c0c:	4b62      	ldr	r3, [pc, #392]	@ (8000d98 <main+0x340>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
	     }

	  if (buzz_flag)
 8000c12:	4b68      	ldr	r3, [pc, #416]	@ (8000db4 <main+0x35c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d00c      	beq.n	8000c36 <main+0x1de>
	  {
		  Set_Buzzer_PWM(50);   // 50% duty cycle, adjust volume
 8000c1c:	2032      	movs	r0, #50	@ 0x32
 8000c1e:	f000 f94f 	bl	8000ec0 <Set_Buzzer_PWM>
		  HAL_Delay(300);
 8000c22:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c26:	f001 fb5d 	bl	80022e4 <HAL_Delay>
		  Set_Buzzer_PWM(0);    // Turn off buzzer
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f948 	bl	8000ec0 <Set_Buzzer_PWM>
		  buzz_flag = 0;
 8000c30:	4b60      	ldr	r3, [pc, #384]	@ (8000db4 <main+0x35c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
	  }

	    if (led_blink_flag) {
 8000c36:	4b60      	ldr	r3, [pc, #384]	@ (8000db8 <main+0x360>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d012      	beq.n	8000c66 <main+0x20e>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c46:	485d      	ldr	r0, [pc, #372]	@ (8000dbc <main+0x364>)
 8000c48:	f002 ffa0 	bl	8003b8c <HAL_GPIO_WritePin>
	        HAL_Delay(300);
 8000c4c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c50:	f001 fb48 	bl	80022e4 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c5a:	4858      	ldr	r0, [pc, #352]	@ (8000dbc <main+0x364>)
 8000c5c:	f002 ff96 	bl	8003b8c <HAL_GPIO_WritePin>
	        led_blink_flag = 0;
 8000c60:	4b55      	ldr	r3, [pc, #340]	@ (8000db8 <main+0x360>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	    }
	  if (joystick_flag) {
 8000c66:	4b56      	ldr	r3, [pc, #344]	@ (8000dc0 <main+0x368>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d07d      	beq.n	8000d6c <main+0x314>
		  x = (uint16_t) readValue[0];
 8000c70:	4b40      	ldr	r3, [pc, #256]	@ (8000d74 <main+0x31c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	4b53      	ldr	r3, [pc, #332]	@ (8000dc4 <main+0x36c>)
 8000c78:	801a      	strh	r2, [r3, #0]
		  y = (uint16_t) readValue[1];
 8000c7a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d74 <main+0x31c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <main+0x370>)
 8000c82:	801a      	strh	r2, [r3, #0]

		  state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8000c84:	2101      	movs	r1, #1
 8000c86:	4851      	ldr	r0, [pc, #324]	@ (8000dcc <main+0x374>)
 8000c88:	f002 ff68 	bl	8003b5c <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd0 <main+0x378>)
 8000c92:	701a      	strb	r2, [r3, #0]
		  joystick_flag = 0;
 8000c94:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <main+0x368>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
	//	  sprintf(b, "X : %d, Y : %d, button: %d\r\n" ,x, y, state);
	//	  HAL_UART_Transmit(&huart3, (uint8_t*)b, strlen(b), HAL_MAX_DELAY);
	//	  HAL_Delay(300);

		  char dir = 'N'; // N = Neutral / no movement
 8000c9a:	234e      	movs	r3, #78	@ 0x4e
 8000c9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		 if (x > mid_x + deadzone)
 8000ca0:	4b48      	ldr	r3, [pc, #288]	@ (8000dc4 <main+0x36c>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <main+0x37c>)
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd8 <main+0x380>)
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	440b      	add	r3, r1
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dd03      	ble.n	8000cbe <main+0x266>
			 dir = 'R'; // right
 8000cb6:	2352      	movs	r3, #82	@ 0x52
 8000cb8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cbc:	e02b      	b.n	8000d16 <main+0x2be>
		 else if (x < mid_x - deadzone)
 8000cbe:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <main+0x36c>)
 8000cc0:	881b      	ldrh	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b43      	ldr	r3, [pc, #268]	@ (8000dd4 <main+0x37c>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <main+0x380>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	1acb      	subs	r3, r1, r3
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	da03      	bge.n	8000cdc <main+0x284>
			 dir = 'L'; // left
 8000cd4:	234c      	movs	r3, #76	@ 0x4c
 8000cd6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cda:	e01c      	b.n	8000d16 <main+0x2be>
		 else if (y > mid_y + deadzone)
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <main+0x370>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ddc <main+0x384>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8000dd8 <main+0x380>)
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	440b      	add	r3, r1
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dd03      	ble.n	8000cfa <main+0x2a2>
			 dir = 'U'; // up
 8000cf2:	2355      	movs	r3, #85	@ 0x55
 8000cf4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000cf8:	e00d      	b.n	8000d16 <main+0x2be>
		 else if (y < mid_y - deadzone)
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <main+0x370>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <main+0x384>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <main+0x380>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	1acb      	subs	r3, r1, r3
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	da02      	bge.n	8000d16 <main+0x2be>
			 dir = 'D'; // down
 8000d10:	2344      	movs	r3, #68	@ 0x44
 8000d12:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		 // Send only if movement detected
		 if (dir != 'N')
 8000d16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d1a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000d1c:	d011      	beq.n	8000d42 <main+0x2ea>
		 {
			char msg[3] = {dir, '\r', '\n'};
 8000d1e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000d22:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000d26:	230d      	movs	r3, #13
 8000d28:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, 3, HAL_MAX_DELAY);
 8000d32:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	4810      	ldr	r0, [pc, #64]	@ (8000d80 <main+0x328>)
 8000d3e:	f005 fc4f 	bl	80065e0 <HAL_UART_Transmit>
		 }

		 // Send button state if pressed
		 if (state == GPIO_PIN_RESET)
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <main+0x378>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d110      	bne.n	8000d6c <main+0x314>
		 {
			char msg[3] = {'B', '\r', '\n'};
 8000d4a:	4a25      	ldr	r2, [pc, #148]	@ (8000de0 <main+0x388>)
 8000d4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	4611      	mov	r1, r2
 8000d54:	8019      	strh	r1, [r3, #0]
 8000d56:	3302      	adds	r3, #2
 8000d58:	0c12      	lsrs	r2, r2, #16
 8000d5a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)msg, 3, HAL_MAX_DELAY);
 8000d5c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	2203      	movs	r2, #3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <main+0x328>)
 8000d68:	f005 fc3a 	bl	80065e0 <HAL_UART_Transmit>
		 }
	  }
	HAL_Delay(200);
 8000d6c:	20c8      	movs	r0, #200	@ 0xc8
 8000d6e:	f001 fab9 	bl	80022e4 <HAL_Delay>
	  if (command_ready) {
 8000d72:	e6ef      	b.n	8000b54 <main+0xfc>
 8000d74:	20000234 	.word	0x20000234
 8000d78:	200000b8 	.word	0x200000b8
 8000d7c:	20000229 	.word	0x20000229
 8000d80:	20000358 	.word	0x20000358
 8000d84:	2000030c 	.word	0x2000030c
 8000d88:	080086a0 	.word	0x080086a0
 8000d8c:	080086b0 	.word	0x080086b0
 8000d90:	080086b8 	.word	0x080086b8
 8000d94:	080086c4 	.word	0x080086c4
 8000d98:	2000022a 	.word	0x2000022a
 8000d9c:	2000022b 	.word	0x2000022b
 8000da0:	200001c4 	.word	0x200001c4
 8000da4:	20000240 	.word	0x20000240
 8000da8:	080086d4 	.word	0x080086d4
 8000dac:	20000244 	.word	0x20000244
 8000db0:	20000008 	.word	0x20000008
 8000db4:	2000022d 	.word	0x2000022d
 8000db8:	2000022c 	.word	0x2000022c
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	2000022e 	.word	0x2000022e
 8000dc4:	20000230 	.word	0x20000230
 8000dc8:	20000232 	.word	0x20000232
 8000dcc:	40020800 	.word	0x40020800
 8000dd0:	2000023c 	.word	0x2000023c
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	080086d8 	.word	0x080086d8

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	@ 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2234      	movs	r2, #52	@ 0x34
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 ffc2 	bl	8007d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb8 <SystemClock_Config+0xd4>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000eb8 <SystemClock_Config+0xd4>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e14:	4b28      	ldr	r3, [pc, #160]	@ (8000eb8 <SystemClock_Config+0xd4>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e20:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <SystemClock_Config+0xd8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a25      	ldr	r2, [pc, #148]	@ (8000ebc <SystemClock_Config+0xd8>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <SystemClock_Config+0xd8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e40:	2310      	movs	r3, #16
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e50:	23d8      	movs	r3, #216	@ 0xd8
 8000e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fefb 	bl	8003c60 <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e70:	f000 f8f0 	bl	8001054 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e74:	f002 fea4 	bl	8003bc0 <HAL_PWREx_EnableOverDrive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e7e:	f000 f8e9 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e82:	230f      	movs	r3, #15
 8000e84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	2107      	movs	r1, #7
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 f98b 	bl	80041bc <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000eac:	f000 f8d2 	bl	8001054 <Error_Handler>
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3750      	adds	r7, #80	@ 0x50
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40007000 	.word	0x40007000

08000ec0 <Set_Buzzer_PWM>:

/* USER CODE BEGIN 4 */
void Set_Buzzer_PWM(uint16_t duty) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
    // duty: 0-100 for 0% to 100%
    if(duty > 100) duty = 100;
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	2b64      	cmp	r3, #100	@ 0x64
 8000ece:	d901      	bls.n	8000ed4 <Set_Buzzer_PWM+0x14>
 8000ed0:	2364      	movs	r3, #100	@ 0x64
 8000ed2:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, (htim2.Init.Period + 1) * duty / 100);
 8000ed4:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <Set_Buzzer_PWM+0x3c>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	fb03 f202 	mul.w	r2, r3, r2
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <Set_Buzzer_PWM+0x3c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4906      	ldr	r1, [pc, #24]	@ (8000f00 <Set_Buzzer_PWM+0x40>)
 8000ee6:	fba1 1202 	umull	r1, r2, r1, r2
 8000eea:	0952      	lsrs	r2, r2, #5
 8000eec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2000030c 	.word	0x2000030c
 8000f00:	51eb851f 	.word	0x51eb851f

08000f04 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    if(hadc->Instance == ADC1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a05      	ldr	r2, [pc, #20]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d102      	bne.n	8000f1c <HAL_ADC_ConvCpltCallback+0x18>
    {
        // Joystick values are ready in readValue array
        joystick_flag = 1;
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x28>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
        // Process joystick input here
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	2000022e 	.word	0x2000022e

08000f30 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a37      	ldr	r2, [pc, #220]	@ (800101c <HAL_UART_RxCpltCallback+0xec>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d167      	bne.n	8001012 <HAL_UART_RxCpltCallback+0xe2>
	  {
	    rx_buffer[rx_index++] = byte;
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	b2d1      	uxtb	r1, r2
 8000f4a:	4a35      	ldr	r2, [pc, #212]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f4c:	7011      	strb	r1, [r2, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b34      	ldr	r3, [pc, #208]	@ (8001024 <HAL_UART_RxCpltCallback+0xf4>)
 8000f52:	7819      	ldrb	r1, [r3, #0]
 8000f54:	4b34      	ldr	r3, [pc, #208]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000f56:	5499      	strb	r1, [r3, r2]

	    // Check for end of message
	    if (byte == '\n' || rx_index >= sizeof(rx_buffer)-1) {
 8000f58:	4b32      	ldr	r3, [pc, #200]	@ (8001024 <HAL_UART_RxCpltCallback+0xf4>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b0a      	cmp	r3, #10
 8000f5e:	d003      	beq.n	8000f68 <HAL_UART_RxCpltCallback+0x38>
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b62      	cmp	r3, #98	@ 0x62
 8000f66:	d94f      	bls.n	8001008 <HAL_UART_RxCpltCallback+0xd8>
	      led_blink_flag = 1;  // Visual confirmation
 8000f68:	4b30      	ldr	r3, [pc, #192]	@ (800102c <HAL_UART_RxCpltCallback+0xfc>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]

	      rx_buffer[rx_index] = '\0';
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	5499      	strb	r1, [r3, r2]
	      memcpy(echo_buffer, rx_buffer, rx_index);
 8000f7a:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4929      	ldr	r1, [pc, #164]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000f82:	482b      	ldr	r0, [pc, #172]	@ (8001030 <HAL_UART_RxCpltCallback+0x100>)
 8000f84:	f006 ff36 	bl	8007df4 <memcpy>
	      command_length = rx_index;
 8000f88:	4b25      	ldr	r3, [pc, #148]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <HAL_UART_RxCpltCallback+0x104>)
 8000f8e:	701a      	strb	r2, [r3, #0]
	      if (rx_buffer[0] == 'F' && rx_buffer[1] == ':') {
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b46      	cmp	r3, #70	@ 0x46
 8000f96:	d110      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x8a>
 8000f98:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	2b3a      	cmp	r3, #58	@ 0x3a
 8000f9e:	d10c      	bne.n	8000fba <HAL_UART_RxCpltCallback+0x8a>
			  food_count = atoi((char*)&rx_buffer[2]);
 8000fa0:	4825      	ldr	r0, [pc, #148]	@ (8001038 <HAL_UART_RxCpltCallback+0x108>)
 8000fa2:	f006 fe41 	bl	8007c28 <atoi>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a24      	ldr	r2, [pc, #144]	@ (800103c <HAL_UART_RxCpltCallback+0x10c>)
 8000faa:	6013      	str	r3, [r2, #0]
		      command_ready = 1;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <HAL_UART_RxCpltCallback+0x110>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		      buzz_flag = 1;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <HAL_UART_RxCpltCallback+0x114>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
	      if (rx_buffer[0] == 'F' && rx_buffer[1] == ':') {
 8000fb8:	e023      	b.n	8001002 <HAL_UART_RxCpltCallback+0xd2>
		  }
		  else if (rx_buffer[0] == 'E' && rx_buffer[1] == ':') {
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b45      	cmp	r3, #69	@ 0x45
 8000fc0:	d10d      	bne.n	8000fde <HAL_UART_RxCpltCallback+0xae>
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fc8:	d109      	bne.n	8000fde <HAL_UART_RxCpltCallback+0xae>
			  energy_level = atoi((char*)&rx_buffer[2]);
 8000fca:	481b      	ldr	r0, [pc, #108]	@ (8001038 <HAL_UART_RxCpltCallback+0x108>)
 8000fcc:	f006 fe2c 	bl	8007c28 <atoi>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001048 <HAL_UART_RxCpltCallback+0x118>)
 8000fd4:	6013      	str	r3, [r2, #0]
		      command_ready = 1;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <HAL_UART_RxCpltCallback+0x110>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
		  else if (rx_buffer[0] == 'E' && rx_buffer[1] == ':') {
 8000fdc:	e011      	b.n	8001002 <HAL_UART_RxCpltCallback+0xd2>
		  }
		  else if (rx_buffer[0] == 'S' && rx_buffer[1] == ':') {
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b53      	cmp	r3, #83	@ 0x53
 8000fe4:	d10d      	bne.n	8001002 <HAL_UART_RxCpltCallback+0xd2>
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_UART_RxCpltCallback+0xf8>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fec:	d109      	bne.n	8001002 <HAL_UART_RxCpltCallback+0xd2>
			  strcpy(status_msg, (char*)&rx_buffer[2]);
 8000fee:	4912      	ldr	r1, [pc, #72]	@ (8001038 <HAL_UART_RxCpltCallback+0x108>)
 8000ff0:	4816      	ldr	r0, [pc, #88]	@ (800104c <HAL_UART_RxCpltCallback+0x11c>)
 8000ff2:	f006 fef7 	bl	8007de4 <strcpy>
		      command_ready = 1;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <HAL_UART_RxCpltCallback+0x110>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
		      buzz_flag = 1;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_UART_RxCpltCallback+0x114>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
		  }
	      rx_index = 0;
 8001002:	4b07      	ldr	r3, [pc, #28]	@ (8001020 <HAL_UART_RxCpltCallback+0xf0>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
	    }

	    HAL_UART_Receive_IT(&huart3, &byte, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	4906      	ldr	r1, [pc, #24]	@ (8001024 <HAL_UART_RxCpltCallback+0xf4>)
 800100c:	4810      	ldr	r0, [pc, #64]	@ (8001050 <HAL_UART_RxCpltCallback+0x120>)
 800100e:	f005 fb70 	bl	80066f2 <HAL_UART_Receive_IT>
    }
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40004800 	.word	0x40004800
 8001020:	20000228 	.word	0x20000228
 8001024:	20000229 	.word	0x20000229
 8001028:	20000160 	.word	0x20000160
 800102c:	2000022c 	.word	0x2000022c
 8001030:	200001c4 	.word	0x200001c4
 8001034:	2000022b 	.word	0x2000022b
 8001038:	20000162 	.word	0x20000162
 800103c:	20000240 	.word	0x20000240
 8001040:	2000022a 	.word	0x2000022a
 8001044:	2000022d 	.word	0x2000022d
 8001048:	20000244 	.word	0x20000244
 800104c:	20000008 	.word	0x20000008
 8001050:	20000358 	.word	0x20000358

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <Error_Handler+0x8>

08001060 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <MX_RNG_Init+0x20>)
 8001066:	4a07      	ldr	r2, [pc, #28]	@ (8001084 <MX_RNG_Init+0x24>)
 8001068:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_RNG_Init+0x20>)
 800106c:	f003 feb4 	bl	8004dd8 <HAL_RNG_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001076:	f7ff ffed 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000248 	.word	0x20000248
 8001084:	50060800 	.word	0x50060800

08001088 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0a8      	sub	sp, #160	@ 0xa0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2290      	movs	r2, #144	@ 0x90
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f006 fe6f 	bl	8007d7c <memset>
  if(rngHandle->Instance==RNG)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <HAL_RNG_MspInit+0x60>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d11b      	bne.n	80010e0 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80010ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 fa65 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80010c4:	f7ff ffc6 	bl	8001054 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_RNG_MspInit+0x64>)
 80010ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_RNG_MspInit+0x64>)
 80010ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d2:	6353      	str	r3, [r2, #52]	@ 0x34
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_RNG_MspInit+0x64>)
 80010d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010e0:	bf00      	nop
 80010e2:	37a0      	adds	r7, #160	@ 0xa0
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	50060800 	.word	0x50060800
 80010ec:	40023800 	.word	0x40023800

080010f0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <MX_SPI5_Init+0x74>)
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <MX_SPI5_Init+0x78>)
 80010f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001164 <MX_SPI5_Init+0x74>)
 80010fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001100:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <MX_SPI5_Init+0x74>)
 800110a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800110e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_SPI5_Init+0x74>)
 800111e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001122:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_SPI5_Init+0x74>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001138:	2200      	movs	r2, #0
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_SPI5_Init+0x74>)
 800113e:	2207      	movs	r2, #7
 8001140:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001144:	2200      	movs	r2, #0
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_SPI5_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_SPI5_Init+0x74>)
 8001150:	f003 fe6c 	bl	8004e2c <HAL_SPI_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800115a:	f7ff ff7b 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000258 	.word	0x20000258
 8001168:	40015000 	.word	0x40015000

0800116c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a17      	ldr	r2, [pc, #92]	@ (80011e8 <HAL_SPI_MspInit+0x7c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d128      	bne.n	80011e0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	4a16      	ldr	r2, [pc, #88]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 8001194:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001198:	6453      	str	r3, [r2, #68]	@ 0x44
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_SPI_MspInit+0x80>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011be:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011d0:	2305      	movs	r3, #5
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <HAL_SPI_MspInit+0x84>)
 80011dc:	f002 fb12 	bl	8003804 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	@ 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40015000 	.word	0x40015000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40021400 	.word	0x40021400

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <HAL_MspInit+0x44>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <HAL_MspInit+0x44>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <HAL_MspInit+0x44>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <HAL_MspInit+0x44>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a08      	ldr	r2, [pc, #32]	@ (8001238 <HAL_MspInit+0x44>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_MspInit+0x44>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <NMI_Handler+0x4>

08001244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <MemManage_Handler+0x4>

08001254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <UsageFault_Handler+0x4>

08001264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f001 f807 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <ADC_IRQHandler+0x10>)
 80012a2:	f001 f887 	bl	80023b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000b8 	.word	0x200000b8

080012b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <USART3_IRQHandler+0x10>)
 80012b6:	f005 fa61 	bl	800677c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000358 	.word	0x20000358

080012c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <DMA2_Stream0_IRQHandler+0x10>)
 80012ca:	f002 f831 	bl	8003330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000100 	.word	0x20000100

080012d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e0:	4a14      	ldr	r2, [pc, #80]	@ (8001334 <_sbrk+0x5c>)
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <_sbrk+0x60>)
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <_sbrk+0x64>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	@ (8001340 <_sbrk+0x68>)
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	429a      	cmp	r2, r3
 8001306:	d207      	bcs.n	8001318 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001308:	f006 fd40 	bl	8007d8c <__errno>
 800130c:	4603      	mov	r3, r0
 800130e:	220c      	movs	r2, #12
 8001310:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	e009      	b.n	800132c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001318:	4b08      	ldr	r3, [pc, #32]	@ (800133c <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <_sbrk+0x64>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <_sbrk+0x64>)
 8001328:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132a:	68fb      	ldr	r3, [r7, #12]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20080000 	.word	0x20080000
 8001338:	00000400 	.word	0x00000400
 800133c:	200002bc 	.word	0x200002bc
 8001340:	20000530 	.word	0x20000530

08001344 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <MX_TIM1_Init+0xa0>)
 8001388:	4a20      	ldr	r2, [pc, #128]	@ (800140c <MX_TIM1_Init+0xa4>)
 800138a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 800138c:	4b1e      	ldr	r3, [pc, #120]	@ (8001408 <MX_TIM1_Init+0xa0>)
 800138e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001392:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <MX_TIM1_Init+0xa0>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800139a:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <MX_TIM1_Init+0xa0>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80013a0:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b4:	4814      	ldr	r0, [pc, #80]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013b6:	f004 f8e3 	bl	8005580 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80013c0:	f7ff fe48 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	480d      	ldr	r0, [pc, #52]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013d2:	f004 fb9b 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013dc:	f7ff fe3a 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_TIM1_Init+0xa0>)
 80013f2:	f005 f819 	bl	8006428 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013fc:	f7ff fe2a 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200002c0 	.word	0x200002c0
 800140c:	40010000 	.word	0x40010000

08001410 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001444:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001448:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 800144a:	4b2b      	ldr	r3, [pc, #172]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 800144c:	22d7      	movs	r2, #215	@ 0xd7
 800144e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001456:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001458:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800145c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800146a:	4823      	ldr	r0, [pc, #140]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 800146c:	f004 f888 	bl	8005580 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001476:	f7ff fded 	bl	8001054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001484:	4619      	mov	r1, r3
 8001486:	481c      	ldr	r0, [pc, #112]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001488:	f004 fb40 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001492:	f7ff fddf 	bl	8001054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001496:	4818      	ldr	r0, [pc, #96]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 8001498:	f004 f8c9 	bl	800562e <HAL_TIM_PWM_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80014a2:	f7ff fdd7 	bl	8001054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	4619      	mov	r1, r3
 80014b4:	4810      	ldr	r0, [pc, #64]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 80014b6:	f004 ffb7 	bl	8006428 <HAL_TIMEx_MasterConfigSynchronization>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80014c0:	f7ff fdc8 	bl	8001054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c4:	2360      	movs	r3, #96	@ 0x60
 80014c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500/2 - 1;
 80014c8:	23f9      	movs	r3, #249	@ 0xf9
 80014ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014d4:	463b      	mov	r3, r7
 80014d6:	220c      	movs	r2, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 80014dc:	f004 fa02 	bl	80058e4 <HAL_TIM_PWM_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014e6:	f7ff fdb5 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ea:	4803      	ldr	r0, [pc, #12]	@ (80014f8 <MX_TIM2_Init+0xe8>)
 80014ec:	f000 f838 	bl	8001560 <HAL_TIM_MspPostInit>

}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	@ 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000030c 	.word	0x2000030c

080014fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a13      	ldr	r2, [pc, #76]	@ (8001558 <HAL_TIM_Base_MspInit+0x5c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10c      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150e:	4b13      	ldr	r3, [pc, #76]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6453      	str	r3, [r2, #68]	@ 0x44
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001526:	e010      	b.n	800154a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001530:	d10b      	bne.n	800154a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_TIM_Base_MspInit+0x60>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40010000 	.word	0x40010000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001580:	d11b      	bne.n	80015ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <HAL_TIM_MspPostInit+0x64>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_TIM_MspPostInit+0x64>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <HAL_TIM_MspPostInit+0x64>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800159a:	2308      	movs	r3, #8
 800159c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015aa:	2301      	movs	r3, #1
 80015ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 80015b6:	f002 f925 	bl	8003804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015d2:	4a15      	ldr	r2, [pc, #84]	@ (8001628 <MX_USART3_UART_Init+0x5c>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_USART3_UART_Init+0x58>)
 8001610:	f004 ff98 	bl	8006544 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800161a:	f7ff fd1b 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000358 	.word	0x20000358
 8001628:	40004800 	.word	0x40004800

0800162c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ae      	sub	sp, #184	@ 0xb8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2290      	movs	r2, #144	@ 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f006 fb95 	bl	8007d7c <memset>
  if(uartHandle->Instance==USART3)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_UART_MspInit+0xc4>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d144      	bne.n	80016e6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800165c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001660:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4618      	mov	r0, r3
 800166c:	f002 ff8c 	bl	8004588 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001676:	f7ff fced 	bl	8001054 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167a:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6413      	str	r3, [r2, #64]	@ 0x40
 8001686:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800168e:	613b      	str	r3, [r7, #16]
 8001690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001692:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a17      	ldr	r2, [pc, #92]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 8001698:	f043 0308 	orr.w	r3, r3, #8
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_UART_MspInit+0xc8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016c4:	2307      	movs	r3, #7
 80016c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016ce:	4619      	mov	r1, r3
 80016d0:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <HAL_UART_MspInit+0xcc>)
 80016d2:	f002 f897 	bl	8003804 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2101      	movs	r1, #1
 80016da:	2027      	movs	r0, #39	@ 0x27
 80016dc:	f001 fc51 	bl	8002f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016e0:	2027      	movs	r0, #39	@ 0x27
 80016e2:	f001 fc6a 	bl	8002fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016e6:	bf00      	nop
 80016e8:	37b8      	adds	r7, #184	@ 0xb8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004800 	.word	0x40004800
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020c00 	.word	0x40020c00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001700:	f7ff fe20 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800172a:	f006 fb35 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff f993 	bl	8000a58 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001740:	08008a80 	.word	0x08008a80
  ldr r2, =_sbss
 8001744:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001748:	2000052c 	.word	0x2000052c

0800174c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <CAN1_RX0_IRQHandler>

0800174e <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800174e:	b590      	push	{r4, r7, lr}
 8001750:	b089      	sub	sp, #36	@ 0x24
 8001752:	af02      	add	r7, sp, #8
 8001754:	4604      	mov	r4, r0
 8001756:	4608      	mov	r0, r1
 8001758:	4611      	mov	r1, r2
 800175a:	461a      	mov	r2, r3
 800175c:	4623      	mov	r3, r4
 800175e:	80fb      	strh	r3, [r7, #6]
 8001760:	4603      	mov	r3, r0
 8001762:	80bb      	strh	r3, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	da01      	bge.n	800179a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001796:	2301      	movs	r3, #1
 8001798:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800179e:	883a      	ldrh	r2, [r7, #0]
 80017a0:	88bb      	ldrh	r3, [r7, #4]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	da01      	bge.n	80017b0 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80017ac:	2301      	movs	r3, #1
 80017ae:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80017b0:	7cfb      	ldrb	r3, [r7, #19]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	823b      	strh	r3, [r7, #16]
 80017c2:	e005      	b.n	80017d0 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80017cc:	887b      	ldrh	r3, [r7, #2]
 80017ce:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80017d0:	7cbb      	ldrb	r3, [r7, #18]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	88bb      	ldrh	r3, [r7, #4]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80017de:	88bb      	ldrh	r3, [r7, #4]
 80017e0:	81fb      	strh	r3, [r7, #14]
 80017e2:	e005      	b.n	80017f0 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80017e4:	88ba      	ldrh	r2, [r7, #4]
 80017e6:	883b      	ldrh	r3, [r7, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80017ec:	883b      	ldrh	r3, [r7, #0]
 80017ee:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80017f0:	8abc      	ldrh	r4, [r7, #20]
 80017f2:	8afa      	ldrh	r2, [r7, #22]
 80017f4:	89f9      	ldrh	r1, [r7, #14]
 80017f6:	8a38      	ldrh	r0, [r7, #16]
 80017f8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4623      	mov	r3, r4
 80017fe:	f000 fca9 	bl	8002154 <ILI9341_Draw_Rectangle>
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}
	...

0800180c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af02      	add	r7, sp, #8
 8001812:	4604      	mov	r4, r0
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4623      	mov	r3, r4
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	4603      	mov	r3, r0
 8001820:	71bb      	strb	r3, [r7, #6]
 8001822:	460b      	mov	r3, r1
 8001824:	717b      	strb	r3, [r7, #5]
 8001826:	4613      	mov	r3, r2
 8001828:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2b1f      	cmp	r3, #31
 8001832:	d802      	bhi.n	800183a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	e002      	b.n	8001840 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	3b20      	subs	r3, #32
 800183e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001840:	2300      	movs	r3, #0
 8001842:	753b      	strb	r3, [r7, #20]
 8001844:	e012      	b.n	800186c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001846:	7dfa      	ldrb	r2, [r7, #23]
 8001848:	7d38      	ldrb	r0, [r7, #20]
 800184a:	7d39      	ldrb	r1, [r7, #20]
 800184c:	4c3b      	ldr	r4, [pc, #236]	@ (800193c <ILI9341_Draw_Char+0x130>)
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	4423      	add	r3, r4
 8001858:	4403      	add	r3, r0
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	f101 0318 	add.w	r3, r1, #24
 8001860:	443b      	add	r3, r7
 8001862:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001866:	7d3b      	ldrb	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	753b      	strb	r3, [r7, #20]
 800186c:	7d3b      	ldrb	r3, [r7, #20]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d9e9      	bls.n	8001846 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	b298      	uxth	r0, r3
 8001876:	797b      	ldrb	r3, [r7, #5]
 8001878:	b299      	uxth	r1, r3
 800187a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800187c:	461a      	mov	r2, r3
 800187e:	0052      	lsls	r2, r2, #1
 8001880:	4413      	add	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	b29c      	uxth	r4, r3
 800188c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f000 fc5f 	bl	8002154 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001896:	2300      	movs	r3, #0
 8001898:	757b      	strb	r3, [r7, #21]
 800189a:	e047      	b.n	800192c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	75bb      	strb	r3, [r7, #22]
 80018a0:	e03e      	b.n	8001920 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80018a2:	7d7b      	ldrb	r3, [r7, #21]
 80018a4:	3318      	adds	r3, #24
 80018a6:	443b      	add	r3, r7
 80018a8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80018ac:	461a      	mov	r2, r3
 80018ae:	7dbb      	ldrb	r3, [r7, #22]
 80018b0:	fa42 f303 	asr.w	r3, r2, r3
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d02e      	beq.n	800191a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80018bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d110      	bne.n	80018e4 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	7d7b      	ldrb	r3, [r7, #21]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4413      	add	r3, r2
 80018cc:	b298      	uxth	r0, r3
 80018ce:	797b      	ldrb	r3, [r7, #5]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	7dbb      	ldrb	r3, [r7, #22]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	4413      	add	r3, r2
 80018d8:	b29b      	uxth	r3, r3
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	4619      	mov	r1, r3
 80018de:	f000 fb5f 	bl	8001fa0 <ILI9341_Draw_Pixel>
 80018e2:	e01a      	b.n	800191a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80018e4:	79bb      	ldrb	r3, [r7, #6]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	7d7b      	ldrb	r3, [r7, #21]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80018ee:	fb11 f303 	smulbb	r3, r1, r3
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	b298      	uxth	r0, r3
 80018f8:	797b      	ldrb	r3, [r7, #5]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	7dbb      	ldrb	r3, [r7, #22]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001902:	fb11 f303 	smulbb	r3, r1, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	4413      	add	r3, r2
 800190a:	b299      	uxth	r1, r3
 800190c:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 800190e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	4623      	mov	r3, r4
 8001916:	f000 fc1d 	bl	8002154 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	3301      	adds	r3, #1
 800191e:	75bb      	strb	r3, [r7, #22]
 8001920:	7dbb      	ldrb	r3, [r7, #22]
 8001922:	2b07      	cmp	r3, #7
 8001924:	d9bd      	bls.n	80018a2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001926:	7d7b      	ldrb	r3, [r7, #21]
 8001928:	3301      	adds	r3, #1
 800192a:	757b      	strb	r3, [r7, #21]
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	2b05      	cmp	r3, #5
 8001930:	d9b4      	bls.n	800189c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	371c      	adds	r7, #28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	080086f4 	.word	0x080086f4

08001940 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b085      	sub	sp, #20
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	460b      	mov	r3, r1
 8001954:	70bb      	strb	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800195a:	e017      	b.n	800198c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	7818      	ldrb	r0, [r3, #0]
 8001964:	883c      	ldrh	r4, [r7, #0]
 8001966:	78ba      	ldrb	r2, [r7, #2]
 8001968:	78f9      	ldrb	r1, [r7, #3]
 800196a:	8bbb      	ldrh	r3, [r7, #28]
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	8b3b      	ldrh	r3, [r7, #24]
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4623      	mov	r3, r4
 8001974:	f7ff ff4a 	bl	800180c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001978:	8b3b      	ldrh	r3, [r7, #24]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	0052      	lsls	r2, r2, #1
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	4413      	add	r3, r2
 800198a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e3      	bne.n	800195c <ILI9341_Draw_Text+0x1c>
    }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
	...

080019a0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80019a4:	f7ff fba4 	bl	80010f0 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80019a8:	f7fe ff2a 	bl	8000800 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b2:	4802      	ldr	r0, [pc, #8]	@ (80019bc <ILI9341_SPI_Init+0x1c>)
 80019b4:	f002 f8ea 	bl	8003b8c <HAL_GPIO_WritePin>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40020800 	.word	0x40020800

080019c0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80019ca:	1df9      	adds	r1, r7, #7
 80019cc:	2301      	movs	r3, #1
 80019ce:	2201      	movs	r2, #1
 80019d0:	4803      	ldr	r0, [pc, #12]	@ (80019e0 <ILI9341_SPI_Send+0x20>)
 80019d2:	f003 fad6 	bl	8004f82 <HAL_SPI_Transmit>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000258 	.word	0x20000258

080019e4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <ILI9341_Write_Command+0x40>)
 80019f6:	f002 f8c9 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a00:	4808      	ldr	r0, [pc, #32]	@ (8001a24 <ILI9341_Write_Command+0x40>)
 8001a02:	f002 f8c3 	bl	8003b8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ffd9 	bl	80019c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a14:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <ILI9341_Write_Command+0x40>)
 8001a16:	f002 f8b9 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40020800 	.word	0x40020800

08001a28 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a38:	480b      	ldr	r0, [pc, #44]	@ (8001a68 <ILI9341_Write_Data+0x40>)
 8001a3a:	f002 f8a7 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a44:	4808      	ldr	r0, [pc, #32]	@ (8001a68 <ILI9341_Write_Data+0x40>)
 8001a46:	f002 f8a1 	bl	8003b8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ffb7 	bl	80019c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a58:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <ILI9341_Write_Data+0x40>)
 8001a5a:	f002 f897 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020800 	.word	0x40020800

08001a6c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80bb      	strh	r3, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	807b      	strh	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001a8a:	202a      	movs	r0, #42	@ 0x2a
 8001a8c:	f7ff ffaa 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	0a1b      	lsrs	r3, r3, #8
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ffc5 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ffc0 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ffb9 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff ffb4 	bl	8001a28 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001ac0:	202b      	movs	r0, #43	@ 0x2b
 8001ac2:	f7ff ff8f 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ffaa 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ffa5 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001ade:	883b      	ldrh	r3, [r7, #0]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff9e 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001aec:	883b      	ldrh	r3, [r7, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff99 	bl	8001a28 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001af6:	202c      	movs	r0, #44	@ 0x2c
 8001af8:	f7ff ff74 	bl	80019e4 <ILI9341_Write_Command>
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}

08001b04 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b0e:	480b      	ldr	r0, [pc, #44]	@ (8001b3c <ILI9341_Reset+0x38>)
 8001b10:	f002 f83c 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b14:	20c8      	movs	r0, #200	@ 0xc8
 8001b16:	f000 fbe5 	bl	80022e4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b20:	4806      	ldr	r0, [pc, #24]	@ (8001b3c <ILI9341_Reset+0x38>)
 8001b22:	f002 f833 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001b26:	20c8      	movs	r0, #200	@ 0xc8
 8001b28:	f000 fbdc 	bl	80022e4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b32:	4802      	ldr	r0, [pc, #8]	@ (8001b3c <ILI9341_Reset+0x38>)
 8001b34:	f002 f82a 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020800 	.word	0x40020800

08001b40 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001b4e:	2036      	movs	r0, #54	@ 0x36
 8001b50:	f7ff ff48 	bl	80019e4 <ILI9341_Write_Command>
HAL_Delay(1);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f000 fbc5 	bl	80022e4 <HAL_Delay>
	
switch(screen_rotation) 
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d837      	bhi.n	8001bd0 <ILI9341_Set_Rotation+0x90>
 8001b60:	a201      	add	r2, pc, #4	@ (adr r2, 8001b68 <ILI9341_Set_Rotation+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8f 	.word	0x08001b8f
 8001b70:	08001ba5 	.word	0x08001ba5
 8001b74:	08001bbb 	.word	0x08001bbb
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001b78:	2048      	movs	r0, #72	@ 0x48
 8001b7a:	f7ff ff55 	bl	8001a28 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <ILI9341_Set_Rotation+0x9c>)
 8001b80:	22f0      	movs	r2, #240	@ 0xf0
 8001b82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001b84:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <ILI9341_Set_Rotation+0xa0>)
 8001b86:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b8a:	801a      	strh	r2, [r3, #0]
			break;
 8001b8c:	e021      	b.n	8001bd2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001b8e:	2028      	movs	r0, #40	@ 0x28
 8001b90:	f7ff ff4a 	bl	8001a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001b94:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <ILI9341_Set_Rotation+0x9c>)
 8001b96:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b9a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001b9c:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <ILI9341_Set_Rotation+0xa0>)
 8001b9e:	22f0      	movs	r2, #240	@ 0xf0
 8001ba0:	801a      	strh	r2, [r3, #0]
			break;
 8001ba2:	e016      	b.n	8001bd2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001ba4:	2088      	movs	r0, #136	@ 0x88
 8001ba6:	f7ff ff3f 	bl	8001a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <ILI9341_Set_Rotation+0x9c>)
 8001bac:	22f0      	movs	r2, #240	@ 0xf0
 8001bae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <ILI9341_Set_Rotation+0xa0>)
 8001bb2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bb6:	801a      	strh	r2, [r3, #0]
			break;
 8001bb8:	e00b      	b.n	8001bd2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001bba:	20e8      	movs	r0, #232	@ 0xe8
 8001bbc:	f7ff ff34 	bl	8001a28 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <ILI9341_Set_Rotation+0x9c>)
 8001bc2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001bc6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <ILI9341_Set_Rotation+0xa0>)
 8001bca:	22f0      	movs	r2, #240	@ 0xf0
 8001bcc:	801a      	strh	r2, [r3, #0]
			break;
 8001bce:	e000      	b.n	8001bd2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001bd0:	bf00      	nop
	}
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000042 	.word	0x20000042
 8001be0:	20000040 	.word	0x20000040

08001be4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bee:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <ILI9341_Enable+0x14>)
 8001bf0:	f001 ffcc 	bl	8003b8c <HAL_GPIO_WritePin>
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40020800 	.word	0x40020800

08001bfc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001c00:	f7ff fff0 	bl	8001be4 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001c04:	f7ff fecc 	bl	80019a0 <ILI9341_SPI_Init>
ILI9341_Reset();
 8001c08:	f7ff ff7c 	bl	8001b04 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fee9 	bl	80019e4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001c12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c16:	f000 fb65 	bl	80022e4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001c1a:	20cb      	movs	r0, #203	@ 0xcb
 8001c1c:	f7ff fee2 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001c20:	2039      	movs	r0, #57	@ 0x39
 8001c22:	f7ff ff01 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001c26:	202c      	movs	r0, #44	@ 0x2c
 8001c28:	f7ff fefe 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fefb 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001c32:	2034      	movs	r0, #52	@ 0x34
 8001c34:	f7ff fef8 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f7ff fef5 	bl	8001a28 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001c3e:	20cf      	movs	r0, #207	@ 0xcf
 8001c40:	f7ff fed0 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff feef 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001c4a:	20c1      	movs	r0, #193	@ 0xc1
 8001c4c:	f7ff feec 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001c50:	2030      	movs	r0, #48	@ 0x30
 8001c52:	f7ff fee9 	bl	8001a28 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001c56:	20e8      	movs	r0, #232	@ 0xe8
 8001c58:	f7ff fec4 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001c5c:	2085      	movs	r0, #133	@ 0x85
 8001c5e:	f7ff fee3 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fee0 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001c68:	2078      	movs	r0, #120	@ 0x78
 8001c6a:	f7ff fedd 	bl	8001a28 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001c6e:	20ea      	movs	r0, #234	@ 0xea
 8001c70:	f7ff feb8 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c74:	2000      	movs	r0, #0
 8001c76:	f7ff fed7 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff fed4 	bl	8001a28 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001c80:	20ed      	movs	r0, #237	@ 0xed
 8001c82:	f7ff feaf 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001c86:	2064      	movs	r0, #100	@ 0x64
 8001c88:	f7ff fece 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f7ff fecb 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001c92:	2012      	movs	r0, #18
 8001c94:	f7ff fec8 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001c98:	2081      	movs	r0, #129	@ 0x81
 8001c9a:	f7ff fec5 	bl	8001a28 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001c9e:	20f7      	movs	r0, #247	@ 0xf7
 8001ca0:	f7ff fea0 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	f7ff febf 	bl	8001a28 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001caa:	20c0      	movs	r0, #192	@ 0xc0
 8001cac:	f7ff fe9a 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001cb0:	2023      	movs	r0, #35	@ 0x23
 8001cb2:	f7ff feb9 	bl	8001a28 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001cb6:	20c1      	movs	r0, #193	@ 0xc1
 8001cb8:	f7ff fe94 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f7ff feb3 	bl	8001a28 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001cc2:	20c5      	movs	r0, #197	@ 0xc5
 8001cc4:	f7ff fe8e 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001cc8:	203e      	movs	r0, #62	@ 0x3e
 8001cca:	f7ff fead 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001cce:	2028      	movs	r0, #40	@ 0x28
 8001cd0:	f7ff feaa 	bl	8001a28 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001cd4:	20c7      	movs	r0, #199	@ 0xc7
 8001cd6:	f7ff fe85 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001cda:	2086      	movs	r0, #134	@ 0x86
 8001cdc:	f7ff fea4 	bl	8001a28 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001ce0:	2036      	movs	r0, #54	@ 0x36
 8001ce2:	f7ff fe7f 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001ce6:	2048      	movs	r0, #72	@ 0x48
 8001ce8:	f7ff fe9e 	bl	8001a28 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001cec:	203a      	movs	r0, #58	@ 0x3a
 8001cee:	f7ff fe79 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001cf2:	2055      	movs	r0, #85	@ 0x55
 8001cf4:	f7ff fe98 	bl	8001a28 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001cf8:	20b1      	movs	r0, #177	@ 0xb1
 8001cfa:	f7ff fe73 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fe92 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001d04:	2018      	movs	r0, #24
 8001d06:	f7ff fe8f 	bl	8001a28 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001d0a:	20b6      	movs	r0, #182	@ 0xb6
 8001d0c:	f7ff fe6a 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001d10:	2008      	movs	r0, #8
 8001d12:	f7ff fe89 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001d16:	2082      	movs	r0, #130	@ 0x82
 8001d18:	f7ff fe86 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001d1c:	2027      	movs	r0, #39	@ 0x27
 8001d1e:	f7ff fe83 	bl	8001a28 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001d22:	20f2      	movs	r0, #242	@ 0xf2
 8001d24:	f7ff fe5e 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fe7d 	bl	8001a28 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001d2e:	2026      	movs	r0, #38	@ 0x26
 8001d30:	f7ff fe58 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fe77 	bl	8001a28 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001d3a:	20e0      	movs	r0, #224	@ 0xe0
 8001d3c:	f7ff fe52 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001d40:	200f      	movs	r0, #15
 8001d42:	f7ff fe71 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001d46:	2031      	movs	r0, #49	@ 0x31
 8001d48:	f7ff fe6e 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001d4c:	202b      	movs	r0, #43	@ 0x2b
 8001d4e:	f7ff fe6b 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001d52:	200c      	movs	r0, #12
 8001d54:	f7ff fe68 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001d58:	200e      	movs	r0, #14
 8001d5a:	f7ff fe65 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001d5e:	2008      	movs	r0, #8
 8001d60:	f7ff fe62 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001d64:	204e      	movs	r0, #78	@ 0x4e
 8001d66:	f7ff fe5f 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001d6a:	20f1      	movs	r0, #241	@ 0xf1
 8001d6c:	f7ff fe5c 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001d70:	2037      	movs	r0, #55	@ 0x37
 8001d72:	f7ff fe59 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001d76:	2007      	movs	r0, #7
 8001d78:	f7ff fe56 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001d7c:	2010      	movs	r0, #16
 8001d7e:	f7ff fe53 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f7ff fe50 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001d88:	200e      	movs	r0, #14
 8001d8a:	f7ff fe4d 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001d8e:	2009      	movs	r0, #9
 8001d90:	f7ff fe4a 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001d94:	2000      	movs	r0, #0
 8001d96:	f7ff fe47 	bl	8001a28 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001d9a:	20e1      	movs	r0, #225	@ 0xe1
 8001d9c:	f7ff fe22 	bl	80019e4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff fe41 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001da6:	200e      	movs	r0, #14
 8001da8:	f7ff fe3e 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001dac:	2014      	movs	r0, #20
 8001dae:	f7ff fe3b 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7ff fe38 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001db8:	2011      	movs	r0, #17
 8001dba:	f7ff fe35 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001dbe:	2007      	movs	r0, #7
 8001dc0:	f7ff fe32 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001dc4:	2031      	movs	r0, #49	@ 0x31
 8001dc6:	f7ff fe2f 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001dca:	20c1      	movs	r0, #193	@ 0xc1
 8001dcc:	f7ff fe2c 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001dd0:	2048      	movs	r0, #72	@ 0x48
 8001dd2:	f7ff fe29 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001dd6:	2008      	movs	r0, #8
 8001dd8:	f7ff fe26 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001ddc:	200f      	movs	r0, #15
 8001dde:	f7ff fe23 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001de2:	200c      	movs	r0, #12
 8001de4:	f7ff fe20 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001de8:	2031      	movs	r0, #49	@ 0x31
 8001dea:	f7ff fe1d 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001dee:	2036      	movs	r0, #54	@ 0x36
 8001df0:	f7ff fe1a 	bl	8001a28 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001df4:	200f      	movs	r0, #15
 8001df6:	f7ff fe17 	bl	8001a28 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001dfa:	2011      	movs	r0, #17
 8001dfc:	f7ff fdf2 	bl	80019e4 <ILI9341_Write_Command>
HAL_Delay(120);
 8001e00:	2078      	movs	r0, #120	@ 0x78
 8001e02:	f000 fa6f 	bl	80022e4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001e06:	2029      	movs	r0, #41	@ 0x29
 8001e08:	f7ff fdec 	bl	80019e4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fe97 	bl	8001b40 <ILI9341_Set_Rotation>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e1c:	b08d      	sub	sp, #52	@ 0x34
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	6039      	str	r1, [r7, #0]
 8001e24:	80fb      	strh	r3, [r7, #6]
 8001e26:	466b      	mov	r3, sp
 8001e28:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e36:	d202      	bcs.n	8001e3e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3c:	e002      	b.n	8001e44 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001e3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e4a:	4840      	ldr	r0, [pc, #256]	@ (8001f4c <ILI9341_Draw_Colour_Burst+0x134>)
 8001e4c:	f001 fe9e 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e56:	483d      	ldr	r0, [pc, #244]	@ (8001f4c <ILI9341_Draw_Colour_Burst+0x134>)
 8001e58:	f001 fe98 	bl	8003b8c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8001e66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001e68:	460b      	mov	r3, r1
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	4688      	mov	r8, r1
 8001e72:	4699      	mov	r9, r3
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	460c      	mov	r4, r1
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	00eb      	lsls	r3, r5, #3
 8001e98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e9c:	00e2      	lsls	r2, r4, #3
 8001e9e:	1dcb      	adds	r3, r1, #7
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ea8:	466b      	mov	r3, sp
 8001eaa:	3300      	adds	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eb2:	e00e      	b.n	8001ed2 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb8:	4413      	add	r3, r2
 8001eba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ebe:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	88fa      	ldrh	r2, [r7, #6]
 8001ec6:	b2d1      	uxtb	r1, r2
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ece:	3302      	adds	r3, #2
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3ec      	bcc.n	8001eb4 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eee:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ef2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ef4:	fb01 f202 	mul.w	r2, r1, r2
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f06:	e009      	b.n	8001f1c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	69b9      	ldr	r1, [r7, #24]
 8001f10:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <ILI9341_Draw_Colour_Burst+0x138>)
 8001f12:	f003 f836 	bl	8004f82 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	3301      	adds	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d3f1      	bcc.n	8001f08 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	230a      	movs	r3, #10
 8001f2a:	69b9      	ldr	r1, [r7, #24]
 8001f2c:	4808      	ldr	r0, [pc, #32]	@ (8001f50 <ILI9341_Draw_Colour_Burst+0x138>)
 8001f2e:	f003 f828 	bl	8004f82 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <ILI9341_Draw_Colour_Burst+0x134>)
 8001f3a:	f001 fe27 	bl	8003b8c <HAL_GPIO_WritePin>
 8001f3e:	46b5      	mov	sp, r6
}
 8001f40:	bf00      	nop
 8001f42:	3734      	adds	r7, #52	@ 0x34
 8001f44:	46bd      	mov	sp, r7
 8001f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	20000258 	.word	0x20000258

08001f54 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <ILI9341_Fill_Screen+0x44>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	4b0d      	ldr	r3, [pc, #52]	@ (8001f9c <ILI9341_Fill_Screen+0x48>)
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff fd7d 	bl	8001a6c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001f72:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <ILI9341_Fill_Screen+0x44>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <ILI9341_Fill_Screen+0x48>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff44 	bl	8001e18 <ILI9341_Draw_Colour_Burst>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000042 	.word	0x20000042
 8001f9c:	20000040 	.word	0x20000040

08001fa0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	80fb      	strh	r3, [r7, #6]
 8001faa:	460b      	mov	r3, r1
 8001fac:	80bb      	strh	r3, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001fb2:	4b64      	ldr	r3, [pc, #400]	@ (8002144 <ILI9341_Draw_Pixel+0x1a4>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	f080 80be 	bcs.w	800213c <ILI9341_Draw_Pixel+0x19c>
 8001fc0:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <ILI9341_Draw_Pixel+0x1a8>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	88ba      	ldrh	r2, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	f080 80b7 	bcs.w	800213c <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd4:	485d      	ldr	r0, [pc, #372]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8001fd6:	f001 fdd9 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fe0:	485a      	ldr	r0, [pc, #360]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8001fe2:	f001 fdd3 	bl	8003b8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001fe6:	202a      	movs	r0, #42	@ 0x2a
 8001fe8:	f7ff fcea 	bl	80019c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001fec:	2201      	movs	r2, #1
 8001fee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ff2:	4856      	ldr	r0, [pc, #344]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8001ff4:	f001 fdca 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ffe:	4853      	ldr	r0, [pc, #332]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002000:	f001 fdc4 	bl	8003b8c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800200a:	4850      	ldr	r0, [pc, #320]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 800200c:	f001 fdbe 	bl	8003b8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	753b      	strb	r3, [r7, #20]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	757b      	strb	r3, [r7, #21]
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	3301      	adds	r3, #1
 8002024:	121b      	asrs	r3, r3, #8
 8002026:	b2db      	uxtb	r3, r3
 8002028:	75bb      	strb	r3, [r7, #22]
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002034:	f107 0114 	add.w	r1, r7, #20
 8002038:	2301      	movs	r3, #1
 800203a:	2204      	movs	r2, #4
 800203c:	4844      	ldr	r0, [pc, #272]	@ (8002150 <ILI9341_Draw_Pixel+0x1b0>)
 800203e:	f002 ffa0 	bl	8004f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002048:	4840      	ldr	r0, [pc, #256]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 800204a:	f001 fd9f 	bl	8003b8c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002054:	483d      	ldr	r0, [pc, #244]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002056:	f001 fd99 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800205a:	2200      	movs	r2, #0
 800205c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002060:	483a      	ldr	r0, [pc, #232]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002062:	f001 fd93 	bl	8003b8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002066:	202b      	movs	r0, #43	@ 0x2b
 8002068:	f7ff fcaa 	bl	80019c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002072:	4836      	ldr	r0, [pc, #216]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002074:	f001 fd8a 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002078:	2201      	movs	r2, #1
 800207a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800207e:	4833      	ldr	r0, [pc, #204]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002080:	f001 fd84 	bl	8003b8c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208a:	4830      	ldr	r0, [pc, #192]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 800208c:	f001 fd7e 	bl	8003b8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002090:	88bb      	ldrh	r3, [r7, #4]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	b29b      	uxth	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	743b      	strb	r3, [r7, #16]
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	747b      	strb	r3, [r7, #17]
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	121b      	asrs	r3, r3, #8
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	74bb      	strb	r3, [r7, #18]
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80020b4:	f107 0110 	add.w	r1, r7, #16
 80020b8:	2301      	movs	r3, #1
 80020ba:	2204      	movs	r2, #4
 80020bc:	4824      	ldr	r0, [pc, #144]	@ (8002150 <ILI9341_Draw_Pixel+0x1b0>)
 80020be:	f002 ff60 	bl	8004f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020c8:	4820      	ldr	r0, [pc, #128]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 80020ca:	f001 fd5f 	bl	8003b8c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020d4:	481d      	ldr	r0, [pc, #116]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 80020d6:	f001 fd59 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e0:	481a      	ldr	r0, [pc, #104]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 80020e2:	f001 fd53 	bl	8003b8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80020e6:	202c      	movs	r0, #44	@ 0x2c
 80020e8:	f7ff fc6a 	bl	80019c0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020f2:	4816      	ldr	r0, [pc, #88]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 80020f4:	f001 fd4a 	bl	8003b8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020fe:	4813      	ldr	r0, [pc, #76]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002100:	f001 fd44 	bl	8003b8c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800210a:	4810      	ldr	r0, [pc, #64]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 800210c:	f001 fd3e 	bl	8003b8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	0a1b      	lsrs	r3, r3, #8
 8002114:	b29b      	uxth	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	733b      	strb	r3, [r7, #12]
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002120:	f107 010c 	add.w	r1, r7, #12
 8002124:	2301      	movs	r3, #1
 8002126:	2202      	movs	r2, #2
 8002128:	4809      	ldr	r0, [pc, #36]	@ (8002150 <ILI9341_Draw_Pixel+0x1b0>)
 800212a:	f002 ff2a 	bl	8004f82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <ILI9341_Draw_Pixel+0x1ac>)
 8002136:	f001 fd29 	bl	8003b8c <HAL_GPIO_WritePin>
 800213a:	e000      	b.n	800213e <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800213c:	bf00      	nop
	
}
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000042 	.word	0x20000042
 8002148:	20000040 	.word	0x20000040
 800214c:	40020800 	.word	0x40020800
 8002150:	20000258 	.word	0x20000258

08002154 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4604      	mov	r4, r0
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4623      	mov	r3, r4
 8002164:	80fb      	strh	r3, [r7, #6]
 8002166:	4603      	mov	r3, r0
 8002168:	80bb      	strh	r3, [r7, #4]
 800216a:	460b      	mov	r3, r1
 800216c:	807b      	strh	r3, [r7, #2]
 800216e:	4613      	mov	r3, r2
 8002170:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <ILI9341_Draw_Rectangle+0xb0>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	429a      	cmp	r2, r3
 800217c:	d23d      	bcs.n	80021fa <ILI9341_Draw_Rectangle+0xa6>
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <ILI9341_Draw_Rectangle+0xb4>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	88ba      	ldrh	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d237      	bcs.n	80021fa <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800218a:	88fa      	ldrh	r2, [r7, #6]
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	4413      	add	r3, r2
 8002190:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <ILI9341_Draw_Rectangle+0xb0>)
 8002192:	8812      	ldrh	r2, [r2, #0]
 8002194:	b292      	uxth	r2, r2
 8002196:	4293      	cmp	r3, r2
 8002198:	dd05      	ble.n	80021a6 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <ILI9341_Draw_Rectangle+0xb0>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80021a6:	88ba      	ldrh	r2, [r7, #4]
 80021a8:	883b      	ldrh	r3, [r7, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <ILI9341_Draw_Rectangle+0xb4>)
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	b292      	uxth	r2, r2
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd05      	ble.n	80021c2 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <ILI9341_Draw_Rectangle+0xb4>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	88bb      	ldrh	r3, [r7, #4]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4413      	add	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29c      	uxth	r4, r3
 80021ce:	88ba      	ldrh	r2, [r7, #4]
 80021d0:	883b      	ldrh	r3, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29b      	uxth	r3, r3
 80021da:	88b9      	ldrh	r1, [r7, #4]
 80021dc:	88f8      	ldrh	r0, [r7, #6]
 80021de:	4622      	mov	r2, r4
 80021e0:	f7ff fc44 	bl	8001a6c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80021e4:	883b      	ldrh	r3, [r7, #0]
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	8b3b      	ldrh	r3, [r7, #24]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fe10 	bl	8001e18 <ILI9341_Draw_Colour_Burst>
 80021f8:	e000      	b.n	80021fc <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80021fa:	bf00      	nop
}
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd90      	pop	{r4, r7, pc}
 8002202:	bf00      	nop
 8002204:	20000042 	.word	0x20000042
 8002208:	20000040 	.word	0x20000040

0800220c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002210:	4b0b      	ldr	r3, [pc, #44]	@ (8002240 <HAL_Init+0x34>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0a      	ldr	r2, [pc, #40]	@ (8002240 <HAL_Init+0x34>)
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221c:	4b08      	ldr	r3, [pc, #32]	@ (8002240 <HAL_Init+0x34>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a07      	ldr	r2, [pc, #28]	@ (8002240 <HAL_Init+0x34>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002228:	2003      	movs	r0, #3
 800222a:	f000 fe9f 	bl	8002f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222e:	200f      	movs	r0, #15
 8002230:	f000 f808 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002234:	f7fe ffde 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023c00 	.word	0x40023c00

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 feb7 	bl	8002fd6 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 fe7f 	bl	8002f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2000003c 	.word	0x2000003c
 800229c:	20000048 	.word	0x20000048
 80022a0:	20000044 	.word	0x20000044

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000048 	.word	0x20000048
 80022c8:	200003e0 	.word	0x200003e0

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200003e0 	.word	0x200003e0

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000048 	.word	0x20000048

0800232c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e031      	b.n	80023a6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7fe f9be 	bl	80006cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800236e:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_ADC_Init+0x84>)
 8002370:	4013      	ands	r3, r2
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fba0 	bl	8002ac0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	@ 0x40
 8002396:	e001      	b.n	800239c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	ffffeefd 	.word	0xffffeefd

080023b4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d049      	beq.n	800247e <HAL_ADC_IRQHandler+0xca>
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d046      	beq.n	800247e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12b      	bne.n	800246e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	d127      	bne.n	800246e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002436:	2b00      	cmp	r3, #0
 8002438:	d119      	bne.n	800246e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0220 	bic.w	r2, r2, #32
 8002448:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d105      	bne.n	800246e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f043 0201 	orr.w	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe fd48 	bl	8000f04 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0212 	mvn.w	r2, #18
 800247c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d057      	beq.n	8002544 <HAL_ADC_IRQHandler+0x190>
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d054      	beq.n	8002544 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d105      	bne.n	80024b2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d139      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d006      	beq.n	80024dc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d12b      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d124      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11d      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d119      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800250e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fc3f 	bl	8002db8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 020c 	mvn.w	r2, #12
 8002542:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002552:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d017      	beq.n	800258a <HAL_ADC_IRQHandler+0x1d6>
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d014      	beq.n	800258a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10d      	bne.n	800258a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002572:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f932 	bl	80027e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0201 	mvn.w	r2, #1
 8002588:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002598:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d015      	beq.n	80025cc <HAL_ADC_IRQHandler+0x218>
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d012      	beq.n	80025cc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f043 0202 	orr.w	r2, r3, #2
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0220 	mvn.w	r2, #32
 80025ba:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f91b 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f06f 0220 	mvn.w	r2, #32
 80025ca:	601a      	str	r2, [r3, #0]
  }
}
 80025cc:	bf00      	nop
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Start_DMA+0x22>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e0d6      	b.n	80027a4 <HAL_ADC_Start_DMA+0x1d0>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d018      	beq.n	800263e <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800261c:	4b63      	ldr	r3, [pc, #396]	@ (80027ac <HAL_ADC_Start_DMA+0x1d8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a63      	ldr	r2, [pc, #396]	@ (80027b0 <HAL_ADC_Start_DMA+0x1dc>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0c9a      	lsrs	r2, r3, #18
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002630:	e002      	b.n	8002638 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	3b01      	subs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	f040 809e 	bne.w	800278a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002652:	4b58      	ldr	r3, [pc, #352]	@ (80027b4 <HAL_ADC_Start_DMA+0x1e0>)
 8002654:	4013      	ands	r3, r2
 8002656:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002674:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002688:	d106      	bne.n	8002698 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f023 0206 	bic.w	r2, r3, #6
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	@ 0x44
 8002696:	e002      	b.n	800269e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026aa:	4a43      	ldr	r2, [pc, #268]	@ (80027b8 <HAL_ADC_Start_DMA+0x1e4>)
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	4a42      	ldr	r2, [pc, #264]	@ (80027bc <HAL_ADC_Start_DMA+0x1e8>)
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ba:	4a41      	ldr	r2, [pc, #260]	@ (80027c0 <HAL_ADC_Start_DMA+0x1ec>)
 80026bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	334c      	adds	r3, #76	@ 0x4c
 80026f2:	4619      	mov	r1, r3
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f000 fd28 	bl	800314c <HAL_DMA_Start_IT>
 80026fc:	4603      	mov	r3, r0
 80026fe:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002700:	4b30      	ldr	r3, [pc, #192]	@ (80027c4 <HAL_ADC_Start_DMA+0x1f0>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10f      	bne.n	800272c <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d143      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	e03a      	b.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a25      	ldr	r2, [pc, #148]	@ (80027c8 <HAL_ADC_Start_DMA+0x1f4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10e      	bne.n	8002754 <HAL_ADC_Start_DMA+0x180>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d107      	bne.n	8002754 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002752:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HAL_ADC_Start_DMA+0x1f0>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d120      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	@ (80027cc <HAL_ADC_Start_DMA+0x1f8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d11b      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d114      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e00b      	b.n	80027a2 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000003c 	.word	0x2000003c
 80027b0:	431bde83 	.word	0x431bde83
 80027b4:	fffff8fe 	.word	0xfffff8fe
 80027b8:	08002cb5 	.word	0x08002cb5
 80027bc:	08002d6f 	.word	0x08002d6f
 80027c0:	08002d8b 	.word	0x08002d8b
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	40012200 	.word	0x40012200

080027d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1c>
 8002824:	2302      	movs	r3, #2
 8002826:	e13a      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x292>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b09      	cmp	r3, #9
 8002836:	d93a      	bls.n	80028ae <HAL_ADC_ConfigChannel+0xa2>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002840:	d035      	beq.n	80028ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68d9      	ldr	r1, [r3, #12]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	3b1e      	subs	r3, #30
 8002858:	2207      	movs	r2, #7
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43da      	mvns	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	400a      	ands	r2, r1
 8002866:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a8f      	ldr	r2, [pc, #572]	@ (8002aac <HAL_ADC_ConfigChannel+0x2a0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68d9      	ldr	r1, [r3, #12]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	061a      	lsls	r2, r3, #24
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002886:	e039      	b.n	80028fc <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	4603      	mov	r3, r0
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4403      	add	r3, r0
 80028a0:	3b1e      	subs	r3, #30
 80028a2:	409a      	lsls	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028ac:	e026      	b.n	80028fc <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6919      	ldr	r1, [r3, #16]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	2207      	movs	r2, #7
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43da      	mvns	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	400a      	ands	r2, r1
 80028d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	4603      	mov	r3, r0
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4403      	add	r3, r0
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	409a      	lsls	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b06      	cmp	r3, #6
 8002902:	d824      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b05      	subs	r3, #5
 8002916:	221f      	movs	r2, #31
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43da      	mvns	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	400a      	ands	r2, r1
 8002924:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b05      	subs	r3, #5
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	635a      	str	r2, [r3, #52]	@ 0x34
 800294c:	e04c      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d824      	bhi.n	80029a0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	3b23      	subs	r3, #35	@ 0x23
 8002968:	221f      	movs	r2, #31
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43da      	mvns	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	400a      	ands	r2, r1
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b29b      	uxth	r3, r3
 8002984:	4618      	mov	r0, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b23      	subs	r3, #35	@ 0x23
 8002992:	fa00 f203 	lsl.w	r2, r0, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	631a      	str	r2, [r3, #48]	@ 0x30
 800299e:	e023      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b41      	subs	r3, #65	@ 0x41
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43da      	mvns	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	400a      	ands	r2, r1
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b41      	subs	r3, #65	@ 0x41
 80029dc:	fa00 f203 	lsl.w	r2, r0, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a30      	ldr	r2, [pc, #192]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10a      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1fc>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029fa:	d105      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029fc:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a06:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10f      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x226>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b12      	cmp	r3, #18
 8002a18:	d10b      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a1a:	4b26      	ldr	r3, [pc, #152]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4a25      	ldr	r2, [pc, #148]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a20:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a24:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a26:	4b23      	ldr	r3, [pc, #140]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a22      	ldr	r2, [pc, #136]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12b      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x288>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	@ (8002aac <HAL_ADC_ConfigChannel+0x2a0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x242>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b11      	cmp	r3, #17
 8002a4c:	d122      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4a18      	ldr	r2, [pc, #96]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a54:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a58:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a5a:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a64:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <HAL_ADC_ConfigChannel+0x2a0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d111      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x2ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <HAL_ADC_ConfigChannel+0x2b0>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9a      	lsrs	r2, r3, #18
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a86:	e002      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	10000012 	.word	0x10000012
 8002ab0:	40012000 	.word	0x40012000
 8002ab4:	40012300 	.word	0x40012300
 8002ab8:	2000003c 	.word	0x2000003c
 8002abc:	431bde83 	.word	0x431bde83

08002ac0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ac8:	4b78      	ldr	r3, [pc, #480]	@ (8002cac <ADC_Init+0x1ec>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4a77      	ldr	r2, [pc, #476]	@ (8002cac <ADC_Init+0x1ec>)
 8002ace:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002ad2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ad4:	4b75      	ldr	r3, [pc, #468]	@ (8002cac <ADC_Init+0x1ec>)
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	4973      	ldr	r1, [pc, #460]	@ (8002cac <ADC_Init+0x1ec>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	021a      	lsls	r2, r3, #8
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	4a58      	ldr	r2, [pc, #352]	@ (8002cb0 <ADC_Init+0x1f0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d022      	beq.n	8002b9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6899      	ldr	r1, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6899      	ldr	r1, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	e00f      	b.n	8002bba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0202 	bic.w	r2, r2, #2
 8002bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	005a      	lsls	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01b      	beq.n	8002c20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	3b01      	subs	r3, #1
 8002c14:	035a      	lsls	r2, r3, #13
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e007      	b.n	8002c30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	051a      	lsls	r2, r3, #20
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6899      	ldr	r1, [r3, #8]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c72:	025a      	lsls	r2, r3, #9
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6899      	ldr	r1, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	029a      	lsls	r2, r3, #10
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40012300 	.word	0x40012300
 8002cb0:	0f000001 	.word	0x0f000001

08002cb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d13c      	bne.n	8002d48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d12b      	bne.n	8002d40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d127      	bne.n	8002d40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d119      	bne.n	8002d40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0220 	bic.w	r2, r2, #32
 8002d1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d105      	bne.n	8002d40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7fe f8df 	bl	8000f04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d46:	e00e      	b.n	8002d66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fd4f 	bl	80027f8 <HAL_ADC_ErrorCallback>
}
 8002d5a:	e004      	b.n	8002d66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fd27 	bl	80027d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	@ 0x40
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f043 0204 	orr.w	r2, r3, #4
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff fd24 	bl	80027f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <__NVIC_SetPriorityGrouping>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x40>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002de8:	4013      	ands	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <__NVIC_SetPriorityGrouping+0x40>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00
 8002e10:	05fa0000 	.word	0x05fa0000

08002e14 <__NVIC_GetPriorityGrouping>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e18:	4b04      	ldr	r3, [pc, #16]	@ (8002e2c <__NVIC_GetPriorityGrouping+0x18>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f003 0307 	and.w	r3, r3, #7
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_EnableIRQ>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0b      	blt.n	8002e5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	@ (8002e68 <__NVIC_EnableIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	@ (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	@ (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	@ 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f38:	d301      	bcc.n	8002f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00f      	b.n	8002f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f68 <SysTick_Config+0x40>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f46:	210f      	movs	r1, #15
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f7ff ff8e 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <SysTick_Config+0x40>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f56:	4b04      	ldr	r3, [pc, #16]	@ (8002f68 <SysTick_Config+0x40>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	e000e010 	.word	0xe000e010

08002f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff29 	bl	8002dcc <__NVIC_SetPriorityGrouping>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	607a      	str	r2, [r7, #4]
 8002f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f94:	f7ff ff3e 	bl	8002e14 <__NVIC_GetPriorityGrouping>
 8002f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff ff8e 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff5d 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb2:	bf00      	nop
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff31 	bl	8002e30 <__NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ffa2 	bl	8002f28 <SysTick_Config>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff f966 	bl	80022cc <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e099      	b.n	8003140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	e00f      	b.n	800304e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302e:	f7ff f94d 	bl	80022cc <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b05      	cmp	r3, #5
 800303a:	d908      	bls.n	800304e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e078      	b.n	8003140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e8      	bne.n	800302e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <HAL_DMA_Init+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d117      	bne.n	8003112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fb09 	bl	800370c <DMA_CheckFifoParam>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2240      	movs	r2, #64	@ 0x40
 8003104:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800310e:	2301      	movs	r3, #1
 8003110:	e016      	b.n	8003140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fac0 	bl	80036a0 <DMA_CalcBaseAndBitshift>
 8003120:	4603      	mov	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	223f      	movs	r2, #63	@ 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	e010803f 	.word	0xe010803f

0800314c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_DMA_Start_IT+0x26>
 800316e:	2302      	movs	r3, #2
 8003170:	e048      	b.n	8003204 <HAL_DMA_Start_IT+0xb8>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d137      	bne.n	80031f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa52 	bl	8003644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	223f      	movs	r2, #63	@ 0x3f
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0216 	orr.w	r2, r2, #22
 80031ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0201 	orr.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e005      	b.n	8003202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031fe:	2302      	movs	r3, #2
 8003200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800321a:	f7ff f857 	bl	80022cc <HAL_GetTick>
 800321e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e052      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0216 	bic.w	r2, r2, #22
 800324c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800325c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_DMA_Abort+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800328e:	e013      	b.n	80032b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003290:	f7ff f81c 	bl	80022cc <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b05      	cmp	r3, #5
 800329c:	d90c      	bls.n	80032b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2220      	movs	r2, #32
 80032a2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e015      	b.n	80032e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e4      	bne.n	8003290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ca:	223f      	movs	r2, #63	@ 0x3f
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d004      	beq.n	800330a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2280      	movs	r2, #128	@ 0x80
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e00c      	b.n	8003324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2205      	movs	r2, #5
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0201 	bic.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800333c:	4b8e      	ldr	r3, [pc, #568]	@ (8003578 <HAL_DMA_IRQHandler+0x248>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a8e      	ldr	r2, [pc, #568]	@ (800357c <HAL_DMA_IRQHandler+0x24c>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0a9b      	lsrs	r3, r3, #10
 8003348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	2208      	movs	r2, #8
 800335c:	409a      	lsls	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d01a      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f022 0204 	bic.w	r2, r2, #4
 8003382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	2208      	movs	r2, #8
 800338a:	409a      	lsls	r2, r3
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a0:	2201      	movs	r2, #1
 80033a2:	409a      	lsls	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d012      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	2201      	movs	r2, #1
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	2204      	movs	r2, #4
 80033d8:	409a      	lsls	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00b      	beq.n	8003408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2204      	movs	r2, #4
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	2210      	movs	r2, #16
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d043      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d03c      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342a:	2210      	movs	r2, #16
 800342c:	409a      	lsls	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e01f      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e016      	b.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0208 	bic.w	r2, r2, #8
 800348e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a4:	2220      	movs	r2, #32
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 808f 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8087 	beq.w	80035d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c6:	2220      	movs	r2, #32
 80034c8:	409a      	lsls	r2, r3
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b05      	cmp	r3, #5
 80034d8:	d136      	bne.n	8003548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0216 	bic.w	r2, r2, #22
 80034e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_DMA_IRQHandler+0x1da>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0208 	bic.w	r2, r2, #8
 8003518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	223f      	movs	r2, #63	@ 0x3f
 8003520:	409a      	lsls	r2, r3
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	d07e      	beq.n	800363c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
        }
        return;
 8003546:	e079      	b.n	800363c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01d      	beq.n	8003592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	2b00      	cmp	r3, #0
 800356a:	d031      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	4798      	blx	r3
 8003574:	e02c      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
 8003576:	bf00      	nop
 8003578:	2000003c 	.word	0x2000003c
 800357c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e01e      	b.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10f      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0210 	bic.w	r2, r2, #16
 80035ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d032      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d022      	beq.n	800362a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2205      	movs	r2, #5
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3301      	adds	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	429a      	cmp	r2, r3
 8003606:	d307      	bcc.n	8003618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f2      	bne.n	80035fc <HAL_DMA_IRQHandler+0x2cc>
 8003616:	e000      	b.n	800361a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
 800363a:	e000      	b.n	800363e <HAL_DMA_IRQHandler+0x30e>
        return;
 800363c:	bf00      	nop
    }
  }
}
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d108      	bne.n	8003684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003682:	e007      	b.n	8003694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	60da      	str	r2, [r3, #12]
}
 8003694:	bf00      	nop
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	3b10      	subs	r3, #16
 80036b0:	4a13      	ldr	r2, [pc, #76]	@ (8003700 <DMA_CalcBaseAndBitshift+0x60>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <DMA_CalcBaseAndBitshift+0x64>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4413      	add	r3, r2
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d908      	bls.n	80036e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80036de:	e006      	b.n	80036ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <DMA_CalcBaseAndBitshift+0x68>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	aaaaaaab 	.word	0xaaaaaaab
 8003704:	08008934 	.word	0x08008934
 8003708:	fffffc00 	.word	0xfffffc00

0800370c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d11f      	bne.n	8003766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d856      	bhi.n	80037da <DMA_CheckFifoParam+0xce>
 800372c:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <DMA_CheckFifoParam+0x28>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	08003757 	.word	0x08003757
 800373c:	08003745 	.word	0x08003745
 8003740:	080037db 	.word	0x080037db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d046      	beq.n	80037de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003754:	e043      	b.n	80037de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800375e:	d140      	bne.n	80037e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003764:	e03d      	b.n	80037e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d121      	bne.n	80037b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d837      	bhi.n	80037e6 <DMA_CheckFifoParam+0xda>
 8003776:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <DMA_CheckFifoParam+0x70>)
 8003778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377c:	0800378d 	.word	0x0800378d
 8003780:	08003793 	.word	0x08003793
 8003784:	0800378d 	.word	0x0800378d
 8003788:	080037a5 	.word	0x080037a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
      break;
 8003790:	e030      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d025      	beq.n	80037ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a2:	e022      	b.n	80037ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ac:	d11f      	bne.n	80037ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037b2:	e01c      	b.n	80037ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d903      	bls.n	80037c2 <DMA_CheckFifoParam+0xb6>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d003      	beq.n	80037c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037c0:	e018      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
      break;
 80037c6:	e015      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00e      	beq.n	80037f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
      break;
 80037d8:	e00b      	b.n	80037f2 <DMA_CheckFifoParam+0xe6>
      break;
 80037da:	bf00      	nop
 80037dc:	e00a      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037de:	bf00      	nop
 80037e0:	e008      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e2:	bf00      	nop
 80037e4:	e006      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <DMA_CheckFifoParam+0xe8>
      break;
 80037f2:	bf00      	nop
    }
  } 
  
  return status; 
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop

08003804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003816:	2300      	movs	r3, #0
 8003818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800381a:	2300      	movs	r3, #0
 800381c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e175      	b.n	8003b10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003824:	2201      	movs	r2, #1
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	f040 8164 	bne.w	8003b0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b01      	cmp	r3, #1
 800384c:	d005      	beq.n	800385a <HAL_GPIO_Init+0x56>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d130      	bne.n	80038bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	2203      	movs	r2, #3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4013      	ands	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4313      	orrs	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003890:	2201      	movs	r2, #1
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f003 0201 	and.w	r2, r3, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d017      	beq.n	80038f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d123      	bne.n	800394c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	08da      	lsrs	r2, r3, #3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3208      	adds	r2, #8
 800390c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	08da      	lsrs	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3208      	adds	r2, #8
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80be 	beq.w	8003b0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398e:	4b66      	ldr	r3, [pc, #408]	@ (8003b28 <HAL_GPIO_Init+0x324>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	4a65      	ldr	r2, [pc, #404]	@ (8003b28 <HAL_GPIO_Init+0x324>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003998:	6453      	str	r3, [r2, #68]	@ 0x44
 800399a:	4b63      	ldr	r3, [pc, #396]	@ (8003b28 <HAL_GPIO_Init+0x324>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80039a6:	4a61      	ldr	r2, [pc, #388]	@ (8003b2c <HAL_GPIO_Init+0x328>)
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	089b      	lsrs	r3, r3, #2
 80039ac:	3302      	adds	r3, #2
 80039ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a58      	ldr	r2, [pc, #352]	@ (8003b30 <HAL_GPIO_Init+0x32c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d037      	beq.n	8003a42 <HAL_GPIO_Init+0x23e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a57      	ldr	r2, [pc, #348]	@ (8003b34 <HAL_GPIO_Init+0x330>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d031      	beq.n	8003a3e <HAL_GPIO_Init+0x23a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a56      	ldr	r2, [pc, #344]	@ (8003b38 <HAL_GPIO_Init+0x334>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d02b      	beq.n	8003a3a <HAL_GPIO_Init+0x236>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a55      	ldr	r2, [pc, #340]	@ (8003b3c <HAL_GPIO_Init+0x338>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d025      	beq.n	8003a36 <HAL_GPIO_Init+0x232>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a54      	ldr	r2, [pc, #336]	@ (8003b40 <HAL_GPIO_Init+0x33c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <HAL_GPIO_Init+0x22e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a53      	ldr	r2, [pc, #332]	@ (8003b44 <HAL_GPIO_Init+0x340>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x22a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_GPIO_Init+0x344>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x226>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a51      	ldr	r2, [pc, #324]	@ (8003b4c <HAL_GPIO_Init+0x348>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x222>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a50      	ldr	r2, [pc, #320]	@ (8003b50 <HAL_GPIO_Init+0x34c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x21e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	@ (8003b54 <HAL_GPIO_Init+0x350>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x21a>
 8003a1a:	2309      	movs	r3, #9
 8003a1c:	e012      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a1e:	230a      	movs	r3, #10
 8003a20:	e010      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a22:	2308      	movs	r3, #8
 8003a24:	e00e      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a26:	2307      	movs	r3, #7
 8003a28:	e00c      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	e00a      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a2e:	2305      	movs	r3, #5
 8003a30:	e008      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a32:	2304      	movs	r3, #4
 8003a34:	e006      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a36:	2303      	movs	r3, #3
 8003a38:	e004      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e002      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_GPIO_Init+0x240>
 8003a42:	2300      	movs	r3, #0
 8003a44:	69fa      	ldr	r2, [r7, #28]
 8003a46:	f002 0203 	and.w	r2, r2, #3
 8003a4a:	0092      	lsls	r2, r2, #2
 8003a4c:	4093      	lsls	r3, r2
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a54:	4935      	ldr	r1, [pc, #212]	@ (8003b2c <HAL_GPIO_Init+0x328>)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a62:	4b3d      	ldr	r3, [pc, #244]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a86:	4a34      	ldr	r2, [pc, #208]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a8c:	4b32      	ldr	r3, [pc, #200]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ab0:	4a29      	ldr	r2, [pc, #164]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ab6:	4b28      	ldr	r3, [pc, #160]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ada:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b04:	4a14      	ldr	r2, [pc, #80]	@ (8003b58 <HAL_GPIO_Init+0x354>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	f67f ae86 	bls.w	8003824 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b18:	bf00      	nop
 8003b1a:	bf00      	nop
 8003b1c:	3724      	adds	r7, #36	@ 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40013800 	.word	0x40013800
 8003b30:	40020000 	.word	0x40020000
 8003b34:	40020400 	.word	0x40020400
 8003b38:	40020800 	.word	0x40020800
 8003b3c:	40020c00 	.word	0x40020c00
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40021400 	.word	0x40021400
 8003b48:	40021800 	.word	0x40021800
 8003b4c:	40021c00 	.word	0x40021c00
 8003b50:	40022000 	.word	0x40022000
 8003b54:	40022400 	.word	0x40022400
 8003b58:	40013c00 	.word	0x40013c00

08003b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691a      	ldr	r2, [r3, #16]
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
 8003b78:	e001      	b.n	8003b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	807b      	strh	r3, [r7, #2]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b9c:	787b      	ldrb	r3, [r7, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba2:	887a      	ldrh	r2, [r7, #2]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ba8:	e003      	b.n	8003bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003baa:	887b      	ldrh	r3, [r7, #2]
 8003bac:	041a      	lsls	r2, r3, #16
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	4b23      	ldr	r3, [pc, #140]	@ (8003c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	4a22      	ldr	r2, [pc, #136]	@ (8003c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd6:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003be2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bee:	f7fe fb6d 	bl	80022cc <HAL_GetTick>
 8003bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf4:	e009      	b.n	8003c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf6:	f7fe fb69 	bl	80022cc <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c04:	d901      	bls.n	8003c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e022      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c0a:	4b14      	ldr	r3, [pc, #80]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c18:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7fe fb52 	bl	80022cc <HAL_GetTick>
 8003c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c2a:	e009      	b.n	8003c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c2c:	f7fe fb4e 	bl	80022cc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c3a:	d901      	bls.n	8003c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e007      	b.n	8003c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c40:	4b06      	ldr	r3, [pc, #24]	@ (8003c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c4c:	d1ee      	bne.n	8003c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40007000 	.word	0x40007000

08003c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e29b      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b96      	ldr	r3, [pc, #600]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c90:	4b93      	ldr	r3, [pc, #588]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62>
 8003c9c:	4b90      	ldr	r3, [pc, #576]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003caa:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x130>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d168      	bne.n	8003d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e275      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x7a>
 8003ccc:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a83      	ldr	r2, [pc, #524]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e02e      	b.n	8003d38 <HAL_RCC_OscConfig+0xd8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x9c>
 8003ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xd8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0xc0>
 8003d06:	4b76      	ldr	r3, [pc, #472]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a75      	ldr	r2, [pc, #468]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b73      	ldr	r3, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a72      	ldr	r2, [pc, #456]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xd8>
 8003d20:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe fac4 	bl	80022cc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fe fac0 	bl	80022cc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	@ 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e229      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xe8>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fab0 	bl	80022cc <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe faac 	bl	80022cc <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	@ 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e215      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b57      	ldr	r3, [pc, #348]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x110>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d069      	beq.n	8003e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x190>
 8003db6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x17a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1e9      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b41      	ldr	r3, [pc, #260]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	493d      	ldr	r1, [pc, #244]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e040      	b.n	8003e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d023      	beq.n	8003e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a38      	ldr	r2, [pc, #224]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fa62 	bl	80022cc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fa5e 	bl	80022cc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1c7      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b30      	ldr	r3, [pc, #192]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4929      	ldr	r1, [pc, #164]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
 8003e3e:	e018      	b.n	8003e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e40:	4b27      	ldr	r3, [pc, #156]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fa3e 	bl	80022cc <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e54:	f7fe fa3a 	bl	80022cc <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1a3      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d038      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d019      	beq.n	8003eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e86:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fa1b 	bl	80022cc <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fe fa17 	bl	80022cc <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e180      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x23a>
 8003eb8:	e01a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	4a08      	ldr	r2, [pc, #32]	@ (8003ee0 <HAL_RCC_OscConfig+0x280>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fa01 	bl	80022cc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe f9fd 	bl	80022cc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d903      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e166      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
 8003ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee4:	4b92      	ldr	r3, [pc, #584]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a4 	beq.w	8004046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b8c      	ldr	r3, [pc, #560]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10d      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b89      	ldr	r3, [pc, #548]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	4a88      	ldr	r2, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f16:	4b86      	ldr	r3, [pc, #536]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f26:	4b83      	ldr	r3, [pc, #524]	@ (8004134 <HAL_RCC_OscConfig+0x4d4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f32:	4b80      	ldr	r3, [pc, #512]	@ (8004134 <HAL_RCC_OscConfig+0x4d4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7f      	ldr	r2, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x4d4>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f9c5 	bl	80022cc <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fe f9c1 	bl	80022cc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b64      	cmp	r3, #100	@ 0x64
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e12a      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f58:	4b76      	ldr	r3, [pc, #472]	@ (8004134 <HAL_RCC_OscConfig+0x4d4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x31a>
 8003f6c:	4b70      	ldr	r3, [pc, #448]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	4a6f      	ldr	r2, [pc, #444]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f78:	e02d      	b.n	8003fd6 <HAL_RCC_OscConfig+0x376>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x33c>
 8003f82:	4b6b      	ldr	r3, [pc, #428]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a6a      	ldr	r2, [pc, #424]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	4b68      	ldr	r3, [pc, #416]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	4a67      	ldr	r2, [pc, #412]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9a:	e01c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x376>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCC_OscConfig+0x35e>
 8003fa4:	4b62      	ldr	r3, [pc, #392]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb0:	4b5f      	ldr	r3, [pc, #380]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbc:	e00b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x376>
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	4b59      	ldr	r3, [pc, #356]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fce:	4a58      	ldr	r2, [pc, #352]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fe f975 	bl	80022cc <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fe f971 	bl	80022cc <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0d8      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8003ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x386>
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe f95f 	bl	80022cc <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe f95b 	bl	80022cc <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0c2      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004028:	4b41      	ldr	r3, [pc, #260]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b3d      	ldr	r3, [pc, #244]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	4a3c      	ldr	r2, [pc, #240]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80ae 	beq.w	80041ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004050:	4b37      	ldr	r3, [pc, #220]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d06d      	beq.n	8004138 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d14b      	bne.n	80040fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b32      	ldr	r3, [pc, #200]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a31      	ldr	r2, [pc, #196]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 800406a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe f92c 	bl	80022cc <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe f928 	bl	80022cc <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e091      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b29      	ldr	r3, [pc, #164]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69da      	ldr	r2, [r3, #28]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	019b      	lsls	r3, r3, #6
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	3b01      	subs	r3, #1
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	061b      	lsls	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	071b      	lsls	r3, r3, #28
 80040c2:	491b      	ldr	r1, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b19      	ldr	r3, [pc, #100]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fe f8fa 	bl	80022cc <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fe f8f6 	bl	80022cc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e05f      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x47c>
 80040fa:	e057      	b.n	80041ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0b      	ldr	r2, [pc, #44]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8004102:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe f8e0 	bl	80022cc <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004110:	f7fe f8dc 	bl	80022cc <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e045      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004122:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <HAL_RCC_OscConfig+0x4d0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0x4b0>
 800412e:	e03d      	b.n	80041ac <HAL_RCC_OscConfig+0x54c>
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004138:	4b1f      	ldr	r3, [pc, #124]	@ (80041b8 <HAL_RCC_OscConfig+0x558>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d030      	beq.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004150:	429a      	cmp	r2, r3
 8004152:	d129      	bne.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d122      	bne.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800416e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004170:	4293      	cmp	r3, r2
 8004172:	d119      	bne.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	085b      	lsrs	r3, r3, #1
 8004180:	3b01      	subs	r3, #1
 8004182:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d10f      	bne.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004192:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800

080041bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0d0      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d910      	bls.n	8004204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b67      	ldr	r3, [pc, #412]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 020f 	bic.w	r2, r3, #15
 80041ea:	4965      	ldr	r1, [pc, #404]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b63      	ldr	r3, [pc, #396]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0b8      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800421c:	4b59      	ldr	r3, [pc, #356]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a58      	ldr	r2, [pc, #352]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004234:	4b53      	ldr	r3, [pc, #332]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a52      	ldr	r2, [pc, #328]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800423e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004240:	4b50      	ldr	r3, [pc, #320]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	494d      	ldr	r1, [pc, #308]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d040      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d115      	bne.n	800429e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07f      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427e:	4b41      	ldr	r3, [pc, #260]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e073      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b3d      	ldr	r3, [pc, #244]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e06b      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429e:	4b39      	ldr	r3, [pc, #228]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 0203 	bic.w	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4936      	ldr	r1, [pc, #216]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f7fe f80c 	bl	80022cc <HAL_GetTick>
 80042b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b6:	e00a      	b.n	80042ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b8:	f7fe f808 	bl	80022cc <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e053      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 020c 	and.w	r2, r3, #12
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1eb      	bne.n	80042b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d210      	bcs.n	8004310 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	4922      	ldr	r1, [pc, #136]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b20      	ldr	r3, [pc, #128]	@ (8004380 <HAL_RCC_ClockConfig+0x1c4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e032      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800431c:	4b19      	ldr	r3, [pc, #100]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4916      	ldr	r1, [pc, #88]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800433a:	4b12      	ldr	r3, [pc, #72]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	490e      	ldr	r1, [pc, #56]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800434e:	f000 f821 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8004352:	4602      	mov	r2, r0
 8004354:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	490a      	ldr	r1, [pc, #40]	@ (8004388 <HAL_RCC_ClockConfig+0x1cc>)
 8004360:	5ccb      	ldrb	r3, [r1, r3]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	4a09      	ldr	r2, [pc, #36]	@ (800438c <HAL_RCC_ClockConfig+0x1d0>)
 8004368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800436a:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCC_ClockConfig+0x1d4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fd ff68 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023c00 	.word	0x40023c00
 8004384:	40023800 	.word	0x40023800
 8004388:	080086dc 	.word	0x080086dc
 800438c:	2000003c 	.word	0x2000003c
 8004390:	20000044 	.word	0x20000044

08004394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004398:	b090      	sub	sp, #64	@ 0x40
 800439a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800439c:	2300      	movs	r3, #0
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a0:	2300      	movs	r3, #0
 80043a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043a4:	2300      	movs	r3, #0
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043ac:	4b59      	ldr	r3, [pc, #356]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d00d      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x40>
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	f200 80a1 	bhi.w	8004500 <HAL_RCC_GetSysClockFreq+0x16c>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x34>
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d003      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x3a>
 80043c6:	e09b      	b.n	8004500 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b53      	ldr	r3, [pc, #332]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043cc:	e09b      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ce:	4b53      	ldr	r3, [pc, #332]	@ (800451c <HAL_RCC_GetSysClockFreq+0x188>)
 80043d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043d2:	e098      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043de:	4b4d      	ldr	r3, [pc, #308]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d028      	beq.n	800443c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	099b      	lsrs	r3, r3, #6
 80043f0:	2200      	movs	r2, #0
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043fc:	2100      	movs	r1, #0
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_RCC_GetSysClockFreq+0x188>)
 8004400:	fb03 f201 	mul.w	r2, r3, r1
 8004404:	2300      	movs	r3, #0
 8004406:	fb00 f303 	mul.w	r3, r0, r3
 800440a:	4413      	add	r3, r2
 800440c:	4a43      	ldr	r2, [pc, #268]	@ (800451c <HAL_RCC_GetSysClockFreq+0x188>)
 800440e:	fba0 1202 	umull	r1, r2, r0, r2
 8004412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004414:	460a      	mov	r2, r1
 8004416:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441a:	4413      	add	r3, r2
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004420:	2200      	movs	r2, #0
 8004422:	61bb      	str	r3, [r7, #24]
 8004424:	61fa      	str	r2, [r7, #28]
 8004426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800442e:	f7fb ff57 	bl	80002e0 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4613      	mov	r3, r2
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800443a:	e053      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800443c:	4b35      	ldr	r3, [pc, #212]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	2200      	movs	r2, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	617a      	str	r2, [r7, #20]
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800444e:	f04f 0b00 	mov.w	fp, #0
 8004452:	4652      	mov	r2, sl
 8004454:	465b      	mov	r3, fp
 8004456:	f04f 0000 	mov.w	r0, #0
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	0159      	lsls	r1, r3, #5
 8004460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004464:	0150      	lsls	r0, r2, #5
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	ebb2 080a 	subs.w	r8, r2, sl
 800446e:	eb63 090b 	sbc.w	r9, r3, fp
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800447e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004482:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004486:	ebb2 0408 	subs.w	r4, r2, r8
 800448a:	eb63 0509 	sbc.w	r5, r3, r9
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	00eb      	lsls	r3, r5, #3
 8004498:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449c:	00e2      	lsls	r2, r4, #3
 800449e:	4614      	mov	r4, r2
 80044a0:	461d      	mov	r5, r3
 80044a2:	eb14 030a 	adds.w	r3, r4, sl
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	eb45 030b 	adc.w	r3, r5, fp
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ba:	4629      	mov	r1, r5
 80044bc:	028b      	lsls	r3, r1, #10
 80044be:	4621      	mov	r1, r4
 80044c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044c4:	4621      	mov	r1, r4
 80044c6:	028a      	lsls	r2, r1, #10
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ce:	2200      	movs	r2, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	60fa      	str	r2, [r7, #12]
 80044d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d8:	f7fb ff02 	bl	80002e0 <__aeabi_uldivmod>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4613      	mov	r3, r2
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x180>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	3301      	adds	r3, #1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044fe:	e002      	b.n	8004506 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x184>)
 8004502:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004508:	4618      	mov	r0, r3
 800450a:	3740      	adds	r7, #64	@ 0x40
 800450c:	46bd      	mov	sp, r7
 800450e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800
 8004518:	00f42400 	.word	0x00f42400
 800451c:	017d7840 	.word	0x017d7840

08004520 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004524:	4b03      	ldr	r3, [pc, #12]	@ (8004534 <HAL_RCC_GetHCLKFreq+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000003c 	.word	0x2000003c

08004538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800453c:	f7ff fff0 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0a9b      	lsrs	r3, r3, #10
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	@ (800455c <HAL_RCC_GetPCLK1Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	080086ec 	.word	0x080086ec

08004560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004564:	f7ff ffdc 	bl	8004520 <HAL_RCC_GetHCLKFreq>
 8004568:	4602      	mov	r2, r0
 800456a:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	0b5b      	lsrs	r3, r3, #13
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	4903      	ldr	r1, [pc, #12]	@ (8004584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004576:	5ccb      	ldrb	r3, [r1, r3]
 8004578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	080086ec 	.word	0x080086ec

08004588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d012      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045b0:	4b69      	ldr	r3, [pc, #420]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a68      	ldr	r2, [pc, #416]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045ba:	6093      	str	r3, [r2, #8]
 80045bc:	4b66      	ldr	r3, [pc, #408]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	4964      	ldr	r1, [pc, #400]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e2:	4b5d      	ldr	r3, [pc, #372]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f0:	4959      	ldr	r1, [pc, #356]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800461e:	4b4e      	ldr	r3, [pc, #312]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004624:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462c:	494a      	ldr	r1, [pc, #296]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800463c:	d101      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 808b 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	4b3a      	ldr	r3, [pc, #232]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	4a39      	ldr	r2, [pc, #228]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6413      	str	r3, [r2, #64]	@ 0x40
 8004678:	4b37      	ldr	r3, [pc, #220]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004684:	4b35      	ldr	r3, [pc, #212]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a34      	ldr	r2, [pc, #208]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800468a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fd fe1c 	bl	80022cc <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004698:	f7fd fe18 	bl	80022cc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	@ 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e38f      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046aa:	4b2c      	ldr	r3, [pc, #176]	@ (800475c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f0      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046b6:	4b28      	ldr	r3, [pc, #160]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d035      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d02e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046d4:	4b20      	ldr	r3, [pc, #128]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b1e      	ldr	r3, [pc, #120]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046f6:	4a18      	ldr	r2, [pc, #96]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046fc:	4b16      	ldr	r3, [pc, #88]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b01      	cmp	r3, #1
 8004706:	d114      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fd fde0 	bl	80022cc <HAL_GetTick>
 800470c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd fddc 	bl	80022cc <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e351      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0ee      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800473e:	d111      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004740:	4b05      	ldr	r3, [pc, #20]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800474c:	4b04      	ldr	r3, [pc, #16]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800474e:	400b      	ands	r3, r1
 8004750:	4901      	ldr	r1, [pc, #4]	@ (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
 8004756:	e00b      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004758:	40023800 	.word	0x40023800
 800475c:	40007000 	.word	0x40007000
 8004760:	0ffffcff 	.word	0x0ffffcff
 8004764:	4bac      	ldr	r3, [pc, #688]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4aab      	ldr	r2, [pc, #684]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800476e:	6093      	str	r3, [r2, #8]
 8004770:	4ba9      	ldr	r3, [pc, #676]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	49a6      	ldr	r1, [pc, #664]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477e:	4313      	orrs	r3, r2
 8004780:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	d010      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800478e:	4ba2      	ldr	r3, [pc, #648]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004794:	4aa0      	ldr	r2, [pc, #640]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800479a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800479e:	4b9e      	ldr	r3, [pc, #632]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	499b      	ldr	r1, [pc, #620]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047bc:	4b96      	ldr	r3, [pc, #600]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ca:	4993      	ldr	r1, [pc, #588]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047de:	4b8e      	ldr	r3, [pc, #568]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ec:	498a      	ldr	r1, [pc, #552]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004800:	4b85      	ldr	r3, [pc, #532]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004806:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800480e:	4982      	ldr	r1, [pc, #520]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004822:	4b7d      	ldr	r3, [pc, #500]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4979      	ldr	r1, [pc, #484]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004844:	4b74      	ldr	r3, [pc, #464]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	4971      	ldr	r1, [pc, #452]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004866:	4b6c      	ldr	r3, [pc, #432]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486c:	f023 020c 	bic.w	r2, r3, #12
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004874:	4968      	ldr	r1, [pc, #416]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004888:	4b63      	ldr	r3, [pc, #396]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004896:	4960      	ldr	r1, [pc, #384]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	4957      	ldr	r1, [pc, #348]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048cc:	4b52      	ldr	r3, [pc, #328]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	494f      	ldr	r1, [pc, #316]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fc:	4946      	ldr	r1, [pc, #280]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004910:	4b41      	ldr	r3, [pc, #260]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491e:	493e      	ldr	r1, [pc, #248]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004938:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004940:	4935      	ldr	r1, [pc, #212]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004954:	4b30      	ldr	r3, [pc, #192]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004962:	492d      	ldr	r1, [pc, #180]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d011      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004976:	4b28      	ldr	r3, [pc, #160]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004984:	4924      	ldr	r1, [pc, #144]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004994:	d101      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004996:	2301      	movs	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b6:	4b18      	ldr	r3, [pc, #96]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c4:	4914      	ldr	r1, [pc, #80]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e8:	490b      	ldr	r1, [pc, #44]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00f      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a0c:	4902      	ldr	r1, [pc, #8]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a14:	e002      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a28:	4b8a      	ldr	r3, [pc, #552]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	4986      	ldr	r1, [pc, #536]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a4c:	4b81      	ldr	r3, [pc, #516]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a52:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a5c:	497d      	ldr	r1, [pc, #500]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d006      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 80d6 	beq.w	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a78:	4b76      	ldr	r3, [pc, #472]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a75      	ldr	r2, [pc, #468]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fd fc22 	bl	80022cc <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a8c:	f7fd fc1e 	bl	80022cc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b64      	cmp	r3, #100	@ 0x64
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e195      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d021      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11d      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004abe:	4b65      	ldr	r3, [pc, #404]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004acc:	4b61      	ldr	r3, [pc, #388]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ad2:	0e1b      	lsrs	r3, r3, #24
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	019a      	lsls	r2, r3, #6
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	071b      	lsls	r3, r3, #28
 8004af2:	4958      	ldr	r1, [pc, #352]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d004      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02e      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b24:	d129      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b26:	4b4b      	ldr	r3, [pc, #300]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b34:	4b47      	ldr	r3, [pc, #284]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	0f1b      	lsrs	r3, r3, #28
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	019a      	lsls	r2, r3, #6
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	493e      	ldr	r1, [pc, #248]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b62:	4b3c      	ldr	r3, [pc, #240]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b68:	f023 021f 	bic.w	r2, r3, #31
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4938      	ldr	r1, [pc, #224]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01d      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b8c:	0e1b      	lsrs	r3, r3, #24
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b94:	4b2f      	ldr	r3, [pc, #188]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b9a:	0f1b      	lsrs	r3, r3, #28
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	071b      	lsls	r3, r3, #28
 8004bba:	4926      	ldr	r1, [pc, #152]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d011      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	071b      	lsls	r3, r3, #28
 8004bea:	491a      	ldr	r1, [pc, #104]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bf2:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a17      	ldr	r2, [pc, #92]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfe:	f7fd fb65 	bl	80022cc <HAL_GetTick>
 8004c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c06:	f7fd fb61 	bl	80022cc <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	@ 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0d8      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 80ce 	bne.w	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a08      	ldr	r2, [pc, #32]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c38:	f7fd fb48 	bl	80022cc <HAL_GetTick>
 8004c3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c40:	f7fd fb44 	bl	80022cc <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	@ 0x64
 8004c4c:	d904      	bls.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e0bb      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c52:	bf00      	nop
 8004c54:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c58:	4b5e      	ldr	r3, [pc, #376]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c64:	d0ec      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d02e      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d12a      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c8e:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca2:	0f1b      	lsrs	r3, r3, #28
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	019a      	lsls	r2, r3, #6
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	061b      	lsls	r3, r3, #24
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	071b      	lsls	r3, r3, #28
 8004cc2:	4944      	ldr	r1, [pc, #272]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cca:	4b42      	ldr	r3, [pc, #264]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cd0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	493d      	ldr	r1, [pc, #244]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d022      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cf8:	d11d      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cfa:	4b36      	ldr	r3, [pc, #216]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	0e1b      	lsrs	r3, r3, #24
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d08:	4b32      	ldr	r3, [pc, #200]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0e:	0f1b      	lsrs	r3, r3, #28
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	019a      	lsls	r2, r3, #6
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	431a      	orrs	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	061b      	lsls	r3, r3, #24
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	071b      	lsls	r3, r3, #28
 8004d2e:	4929      	ldr	r1, [pc, #164]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d028      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d48:	0e1b      	lsrs	r3, r3, #24
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d50:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	019a      	lsls	r2, r3, #6
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	041b      	lsls	r3, r3, #16
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	071b      	lsls	r3, r3, #28
 8004d76:	4917      	ldr	r1, [pc, #92]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d84:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4911      	ldr	r1, [pc, #68]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d94:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd fa94 	bl	80022cc <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004da8:	f7fd fa90 	bl	80022cc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	@ 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e007      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc6:	d1ef      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800

08004dd8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e01c      	b.n	8004e24 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	795b      	ldrb	r3, [r3, #5]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fc f944 	bl	8001088 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0204 	orr.w	r2, r2, #4
 8004e14:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e09d      	b.n	8004f7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4e:	d009      	beq.n	8004e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	61da      	str	r2, [r3, #28]
 8004e56:	e005      	b.n	8004e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc f974 	bl	800116c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ea4:	d902      	bls.n	8004eac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e002      	b.n	8004eb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004eac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004eba:	d007      	beq.n	8004ecc <HAL_SPI_Init+0xa0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ec4:	d002      	beq.n	8004ecc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0e:	ea42 0103 	orr.w	r1, r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	f003 0204 	and.w	r2, r3, #4
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f48:	ea42 0103 	orr.w	r1, r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b088      	sub	sp, #32
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f92:	f7fd f99b 	bl	80022cc <HAL_GetTick>
 8004f96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e15c      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_SPI_Transmit+0x36>
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e154      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_SPI_Transmit+0x48>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e14d      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	88fa      	ldrh	r2, [r7, #6]
 8004fea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	88fa      	ldrh	r2, [r7, #6]
 8004ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501c:	d10f      	bne.n	800503e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800502c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800503c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005048:	2b40      	cmp	r3, #64	@ 0x40
 800504a:	d007      	beq.n	800505c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800505a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005064:	d952      	bls.n	800510c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Transmit+0xf2>
 800506e:	8b7b      	ldrh	r3, [r7, #26]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d145      	bne.n	8005100 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	881a      	ldrh	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005098:	e032      	b.n	8005100 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d112      	bne.n	80050ce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ac:	881a      	ldrh	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b8:	1c9a      	adds	r2, r3, #2
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050cc:	e018      	b.n	8005100 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ce:	f7fd f8fd 	bl	80022cc <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d803      	bhi.n	80050e6 <HAL_SPI_Transmit+0x164>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d102      	bne.n	80050ec <HAL_SPI_Transmit+0x16a>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0b2      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1c7      	bne.n	800509a <HAL_SPI_Transmit+0x118>
 800510a:	e083      	b.n	8005214 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_Transmit+0x198>
 8005114:	8b7b      	ldrh	r3, [r7, #26]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d177      	bne.n	800520a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d912      	bls.n	800514a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	881a      	ldrh	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	1c9a      	adds	r2, r3, #2
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b02      	subs	r3, #2
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005148:	e05f      	b.n	800520a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	330c      	adds	r3, #12
 8005154:	7812      	ldrb	r2, [r2, #0]
 8005156:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005170:	e04b      	b.n	800520a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b02      	cmp	r3, #2
 800517e:	d12b      	bne.n	80051d8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b01      	cmp	r3, #1
 8005188:	d912      	bls.n	80051b0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	881a      	ldrh	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	1c9a      	adds	r2, r3, #2
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b02      	subs	r3, #2
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051ae:	e02c      	b.n	800520a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	330c      	adds	r3, #12
 80051ba:	7812      	ldrb	r2, [r2, #0]
 80051bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80051d6:	e018      	b.n	800520a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d8:	f7fd f878 	bl	80022cc <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d803      	bhi.n	80051f0 <HAL_SPI_Transmit+0x26e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_Transmit+0x274>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e02d      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1ae      	bne.n	8005172 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	6839      	ldr	r1, [r7, #0]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 f947 	bl	80054ac <SPI_EndRxTxTransaction>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10a      	bne.n	8005248 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005264:	2300      	movs	r3, #0
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	4613      	mov	r3, r2
 800527e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005280:	f7fd f824 	bl	80022cc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005290:	f7fd f81c 	bl	80022cc <HAL_GetTick>
 8005294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005296:	4b39      	ldr	r3, [pc, #228]	@ (800537c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	015b      	lsls	r3, r3, #5
 800529c:	0d1b      	lsrs	r3, r3, #20
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	fb02 f303 	mul.w	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a6:	e055      	b.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ae:	d051      	beq.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052b0:	f7fd f80c 	bl	80022cc <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d902      	bls.n	80052c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d13d      	bne.n	8005342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052de:	d111      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052e8:	d004      	beq.n	80052f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f2:	d107      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800530c:	d10f      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800532c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e018      	b.n	8005374 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d102      	bne.n	800534e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e002      	b.n	8005354 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	3b01      	subs	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	429a      	cmp	r2, r3
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	429a      	cmp	r2, r3
 8005370:	d19a      	bne.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	2000003c 	.word	0x2000003c

08005380 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	@ 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005392:	f7fc ff9b 	bl	80022cc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	4413      	add	r3, r2
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80053a2:	f7fc ff93 	bl	80022cc <HAL_GetTick>
 80053a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053b0:	4b3d      	ldr	r3, [pc, #244]	@ (80054a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	00da      	lsls	r2, r3, #3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	0d1b      	lsrs	r3, r3, #20
 80053c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053c8:	e061      	b.n	800548e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80053d0:	d107      	bne.n	80053e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d051      	beq.n	800548e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053ea:	f7fc ff6f 	bl	80022cc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d902      	bls.n	8005400 <SPI_WaitFifoStateUntilTimeout+0x80>
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d13d      	bne.n	800547c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800540e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005418:	d111      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005422:	d004      	beq.n	800542e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800542c:	d107      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005446:	d10f      	bne.n	8005468 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005466:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e011      	b.n	80054a0 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d102      	bne.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	@ 0x24
 8005486:	e002      	b.n	800548e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	3b01      	subs	r3, #1
 800548c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4013      	ands	r3, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d195      	bne.n	80053ca <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3728      	adds	r7, #40	@ 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	2000003c 	.word	0x2000003c

080054ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2200      	movs	r2, #0
 80054c0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff ff5b 	bl	8005380 <SPI_WaitFifoStateUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d007      	beq.n	80054e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e046      	b.n	800556e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054e0:	4b25      	ldr	r3, [pc, #148]	@ (8005578 <SPI_EndRxTxTransaction+0xcc>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a25      	ldr	r2, [pc, #148]	@ (800557c <SPI_EndRxTxTransaction+0xd0>)
 80054e6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ea:	0d5b      	lsrs	r3, r3, #21
 80054ec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054fe:	d112      	bne.n	8005526 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2200      	movs	r2, #0
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f7ff feb0 	bl	8005270 <SPI_WaitFlagStateUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e023      	b.n	800556e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3b01      	subs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	2b80      	cmp	r3, #128	@ 0x80
 800553e:	d0f2      	beq.n	8005526 <SPI_EndRxTxTransaction+0x7a>
 8005540:	e000      	b.n	8005544 <SPI_EndRxTxTransaction+0x98>
        break;
 8005542:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff ff15 	bl	8005380 <SPI_WaitFifoStateUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e000      	b.n	800556e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	2000003c 	.word	0x2000003c
 800557c:	165e9f81 	.word	0x165e9f81

08005580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e049      	b.n	8005626 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fb ffa8 	bl	80014fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3304      	adds	r3, #4
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fb6e 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e049      	b.n	80056d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f841 	bl	80056dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 fb17 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <HAL_TIM_PWM_Start+0x24>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	e03c      	b.n	800578e <HAL_TIM_PWM_Start+0x9e>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2b04      	cmp	r3, #4
 8005718:	d109      	bne.n	800572e <HAL_TIM_PWM_Start+0x3e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b01      	cmp	r3, #1
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e02f      	b.n	800578e <HAL_TIM_PWM_Start+0x9e>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d109      	bne.n	8005748 <HAL_TIM_PWM_Start+0x58>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b01      	cmp	r3, #1
 800573e:	bf14      	ite	ne
 8005740:	2301      	movne	r3, #1
 8005742:	2300      	moveq	r3, #0
 8005744:	b2db      	uxtb	r3, r3
 8005746:	e022      	b.n	800578e <HAL_TIM_PWM_Start+0x9e>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b0c      	cmp	r3, #12
 800574c:	d109      	bne.n	8005762 <HAL_TIM_PWM_Start+0x72>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e015      	b.n	800578e <HAL_TIM_PWM_Start+0x9e>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b10      	cmp	r3, #16
 8005766:	d109      	bne.n	800577c <HAL_TIM_PWM_Start+0x8c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e008      	b.n	800578e <HAL_TIM_PWM_Start+0x9e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e092      	b.n	80058bc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_PWM_Start+0xb6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a4:	e023      	b.n	80057ee <HAL_TIM_PWM_Start+0xfe>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_PWM_Start+0xc6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b4:	e01b      	b.n	80057ee <HAL_TIM_PWM_Start+0xfe>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_PWM_Start+0xd6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057c4:	e013      	b.n	80057ee <HAL_TIM_PWM_Start+0xfe>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b0c      	cmp	r3, #12
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_PWM_Start+0xe6>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057d4:	e00b      	b.n	80057ee <HAL_TIM_PWM_Start+0xfe>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0xf6>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057e4:	e003      	b.n	80057ee <HAL_TIM_PWM_Start+0xfe>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2201      	movs	r2, #1
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fdf0 	bl	80063dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a30      	ldr	r2, [pc, #192]	@ (80058c4 <HAL_TIM_PWM_Start+0x1d4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_PWM_Start+0x120>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2f      	ldr	r2, [pc, #188]	@ (80058c8 <HAL_TIM_PWM_Start+0x1d8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d101      	bne.n	8005814 <HAL_TIM_PWM_Start+0x124>
 8005810:	2301      	movs	r3, #1
 8005812:	e000      	b.n	8005816 <HAL_TIM_PWM_Start+0x126>
 8005814:	2300      	movs	r3, #0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a25      	ldr	r2, [pc, #148]	@ (80058c4 <HAL_TIM_PWM_Start+0x1d4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800583c:	d01d      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a22      	ldr	r2, [pc, #136]	@ (80058cc <HAL_TIM_PWM_Start+0x1dc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a20      	ldr	r2, [pc, #128]	@ (80058d0 <HAL_TIM_PWM_Start+0x1e0>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a1f      	ldr	r2, [pc, #124]	@ (80058d4 <HAL_TIM_PWM_Start+0x1e4>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a19      	ldr	r2, [pc, #100]	@ (80058c8 <HAL_TIM_PWM_Start+0x1d8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1b      	ldr	r2, [pc, #108]	@ (80058d8 <HAL_TIM_PWM_Start+0x1e8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_TIM_PWM_Start+0x18a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a19      	ldr	r2, [pc, #100]	@ (80058dc <HAL_TIM_PWM_Start+0x1ec>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d115      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b17      	ldr	r3, [pc, #92]	@ (80058e0 <HAL_TIM_PWM_Start+0x1f0>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d015      	beq.n	80058b8 <HAL_TIM_PWM_Start+0x1c8>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005892:	d011      	beq.n	80058b8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	e008      	b.n	80058b8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e000      	b.n	80058ba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400
 80058cc:	40000400 	.word	0x40000400
 80058d0:	40000800 	.word	0x40000800
 80058d4:	40000c00 	.word	0x40000c00
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40001800 	.word	0x40001800
 80058e0:	00010007 	.word	0x00010007

080058e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e0ff      	b.n	8005b02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b14      	cmp	r3, #20
 800590e:	f200 80f0 	bhi.w	8005af2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005912:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	0800596d 	.word	0x0800596d
 800591c:	08005af3 	.word	0x08005af3
 8005920:	08005af3 	.word	0x08005af3
 8005924:	08005af3 	.word	0x08005af3
 8005928:	080059ad 	.word	0x080059ad
 800592c:	08005af3 	.word	0x08005af3
 8005930:	08005af3 	.word	0x08005af3
 8005934:	08005af3 	.word	0x08005af3
 8005938:	080059ef 	.word	0x080059ef
 800593c:	08005af3 	.word	0x08005af3
 8005940:	08005af3 	.word	0x08005af3
 8005944:	08005af3 	.word	0x08005af3
 8005948:	08005a2f 	.word	0x08005a2f
 800594c:	08005af3 	.word	0x08005af3
 8005950:	08005af3 	.word	0x08005af3
 8005954:	08005af3 	.word	0x08005af3
 8005958:	08005a71 	.word	0x08005a71
 800595c:	08005af3 	.word	0x08005af3
 8005960:	08005af3 	.word	0x08005af3
 8005964:	08005af3 	.word	0x08005af3
 8005968:	08005ab1 	.word	0x08005ab1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68b9      	ldr	r1, [r7, #8]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fa3a 	bl	8005dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0208 	orr.w	r2, r2, #8
 8005986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0204 	bic.w	r2, r2, #4
 8005996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6999      	ldr	r1, [r3, #24]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	619a      	str	r2, [r3, #24]
      break;
 80059aa:	e0a5      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 fa8c 	bl	8005ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	021a      	lsls	r2, r3, #8
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	619a      	str	r2, [r3, #24]
      break;
 80059ec:	e084      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68b9      	ldr	r1, [r7, #8]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fae3 	bl	8005fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0208 	orr.w	r2, r2, #8
 8005a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0204 	bic.w	r2, r2, #4
 8005a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69d9      	ldr	r1, [r3, #28]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	691a      	ldr	r2, [r3, #16]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	61da      	str	r2, [r3, #28]
      break;
 8005a2c:	e064      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fb39 	bl	80060ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	021a      	lsls	r2, r3, #8
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	61da      	str	r2, [r3, #28]
      break;
 8005a6e:	e043      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb70 	bl	800615c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0208 	orr.w	r2, r2, #8
 8005a8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0204 	bic.w	r2, r2, #4
 8005a9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aae:	e023      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fba2 	bl	8006200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ada:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005af0:	e002      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	75fb      	strb	r3, [r7, #23]
      break;
 8005af6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop

08005b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_ConfigClockSource+0x1c>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e0b4      	b.n	8005c92 <HAL_TIM_ConfigClockSource+0x186>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	4b56      	ldr	r3, [pc, #344]	@ (8005c9c <HAL_TIM_ConfigClockSource+0x190>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b60:	d03e      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0xd4>
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b66:	f200 8087 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6e:	f000 8086 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x172>
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b76:	d87f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b78:	2b70      	cmp	r3, #112	@ 0x70
 8005b7a:	d01a      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005b7c:	2b70      	cmp	r3, #112	@ 0x70
 8005b7e:	d87b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b80:	2b60      	cmp	r3, #96	@ 0x60
 8005b82:	d050      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x11a>
 8005b84:	2b60      	cmp	r3, #96	@ 0x60
 8005b86:	d877      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b88:	2b50      	cmp	r3, #80	@ 0x50
 8005b8a:	d03c      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0xfa>
 8005b8c:	2b50      	cmp	r3, #80	@ 0x50
 8005b8e:	d873      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b90:	2b40      	cmp	r3, #64	@ 0x40
 8005b92:	d058      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x13a>
 8005b94:	2b40      	cmp	r3, #64	@ 0x40
 8005b96:	d86f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	2b30      	cmp	r3, #48	@ 0x30
 8005b9a:	d064      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005b9c:	2b30      	cmp	r3, #48	@ 0x30
 8005b9e:	d86b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d060      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d867      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d05c      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d05a      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	e062      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bc2:	f000 fbeb 	bl	800639c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
      break;
 8005bde:	e04f      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bf0:	f000 fbd4 	bl	800639c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005c02:	609a      	str	r2, [r3, #8]
      break;
 8005c04:	e03c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fb48 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2150      	movs	r1, #80	@ 0x50
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fba1 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005c24:	e02c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fb67 	bl	8006306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2160      	movs	r1, #96	@ 0x60
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fb91 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005c44:	e01c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fb28 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2140      	movs	r1, #64	@ 0x40
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fb81 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005c64:	e00c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f000 fb78 	bl	8006366 <TIM_ITRx_SetConfig>
      break;
 8005c76:	e003      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e000      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	fffeff88 	.word	0xfffeff88

08005ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a43      	ldr	r2, [pc, #268]	@ (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cbe:	d00f      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a40      	ldr	r2, [pc, #256]	@ (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00b      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc8 <TIM_Base_SetConfig+0x128>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d007      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8005dcc <TIM_Base_SetConfig+0x12c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d003      	beq.n	8005ce0 <TIM_Base_SetConfig+0x40>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a3d      	ldr	r2, [pc, #244]	@ (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d108      	bne.n	8005cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a32      	ldr	r2, [pc, #200]	@ (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d02b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d00:	d027      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a2f      	ldr	r2, [pc, #188]	@ (8005dc4 <TIM_Base_SetConfig+0x124>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d023      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005dc8 <TIM_Base_SetConfig+0x128>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2d      	ldr	r2, [pc, #180]	@ (8005dcc <TIM_Base_SetConfig+0x12c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d017      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd4 <TIM_Base_SetConfig+0x134>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d013      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005dd8 <TIM_Base_SetConfig+0x138>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00f      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a29      	ldr	r2, [pc, #164]	@ (8005ddc <TIM_Base_SetConfig+0x13c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00b      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a28      	ldr	r2, [pc, #160]	@ (8005de0 <TIM_Base_SetConfig+0x140>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d007      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a27      	ldr	r2, [pc, #156]	@ (8005de4 <TIM_Base_SetConfig+0x144>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d003      	beq.n	8005d52 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <TIM_Base_SetConfig+0x148>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d108      	bne.n	8005d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc0 <TIM_Base_SetConfig+0x120>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_Base_SetConfig+0xf2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a10      	ldr	r2, [pc, #64]	@ (8005dd0 <TIM_Base_SetConfig+0x130>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d103      	bne.n	8005d9a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	40010000 	.word	0x40010000
 8005dc4:	40000400 	.word	0x40000400
 8005dc8:	40000800 	.word	0x40000800
 8005dcc:	40000c00 	.word	0x40000c00
 8005dd0:	40010400 	.word	0x40010400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800
 8005de0:	40001800 	.word	0x40001800
 8005de4:	40001c00 	.word	0x40001c00
 8005de8:	40002000 	.word	0x40002000

08005dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0201 	bic.w	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <TIM_OC1_SetConfig+0xd8>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0302 	bic.w	r3, r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a21      	ldr	r2, [pc, #132]	@ (8005ec8 <TIM_OC1_SetConfig+0xdc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC1_SetConfig+0x64>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a20      	ldr	r2, [pc, #128]	@ (8005ecc <TIM_OC1_SetConfig+0xe0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0308 	bic.w	r3, r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <TIM_OC1_SetConfig+0xdc>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d003      	beq.n	8005e7a <TIM_OC1_SetConfig+0x8e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a15      	ldr	r2, [pc, #84]	@ (8005ecc <TIM_OC1_SetConfig+0xe0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d111      	bne.n	8005e9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	fffeff8f 	.word	0xfffeff8f
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4b2e      	ldr	r3, [pc, #184]	@ (8005fb4 <TIM_OC2_SetConfig+0xe4>)
 8005efc:	4013      	ands	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a23      	ldr	r2, [pc, #140]	@ (8005fb8 <TIM_OC2_SetConfig+0xe8>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC2_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a22      	ldr	r2, [pc, #136]	@ (8005fbc <TIM_OC2_SetConfig+0xec>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10d      	bne.n	8005f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <TIM_OC2_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_OC2_SetConfig+0x94>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a17      	ldr	r2, [pc, #92]	@ (8005fbc <TIM_OC2_SetConfig+0xec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d113      	bne.n	8005f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	feff8fff 	.word	0xfeff8fff
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40010400 	.word	0x40010400

08005fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4b2d      	ldr	r3, [pc, #180]	@ (80060a0 <TIM_OC3_SetConfig+0xe0>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0303 	bic.w	r3, r3, #3
 8005ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a22      	ldr	r2, [pc, #136]	@ (80060a4 <TIM_OC3_SetConfig+0xe4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d003      	beq.n	8006026 <TIM_OC3_SetConfig+0x66>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a21      	ldr	r2, [pc, #132]	@ (80060a8 <TIM_OC3_SetConfig+0xe8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <TIM_OC3_SetConfig+0xe4>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d003      	beq.n	8006052 <TIM_OC3_SetConfig+0x92>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <TIM_OC3_SetConfig+0xe8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d113      	bne.n	800607a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	621a      	str	r2, [r3, #32]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	fffeff8f 	.word	0xfffeff8f
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4b1e      	ldr	r3, [pc, #120]	@ (8006150 <TIM_OC4_SetConfig+0xa4>)
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	031b      	lsls	r3, r3, #12
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a13      	ldr	r2, [pc, #76]	@ (8006154 <TIM_OC4_SetConfig+0xa8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC4_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a12      	ldr	r2, [pc, #72]	@ (8006158 <TIM_OC4_SetConfig+0xac>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d109      	bne.n	8006128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800611a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	019b      	lsls	r3, r3, #6
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	feff8fff 	.word	0xfeff8fff
 8006154:	40010000 	.word	0x40010000
 8006158:	40010400 	.word	0x40010400

0800615c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <TIM_OC5_SetConfig+0x98>)
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800619c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a12      	ldr	r2, [pc, #72]	@ (80061f8 <TIM_OC5_SetConfig+0x9c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d003      	beq.n	80061ba <TIM_OC5_SetConfig+0x5e>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a11      	ldr	r2, [pc, #68]	@ (80061fc <TIM_OC5_SetConfig+0xa0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d109      	bne.n	80061ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	621a      	str	r2, [r3, #32]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	fffeff8f 	.word	0xfffeff8f
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400

08006200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4b1c      	ldr	r3, [pc, #112]	@ (800629c <TIM_OC6_SetConfig+0x9c>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	051b      	lsls	r3, r3, #20
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a13      	ldr	r2, [pc, #76]	@ (80062a0 <TIM_OC6_SetConfig+0xa0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC6_SetConfig+0x60>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a12      	ldr	r2, [pc, #72]	@ (80062a4 <TIM_OC6_SetConfig+0xa4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	029b      	lsls	r3, r3, #10
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	feff8fff 	.word	0xfeff8fff
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 030a 	bic.w	r3, r3, #10
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006306:	b480      	push	{r7}
 8006308:	b087      	sub	sp, #28
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 0210 	bic.w	r2, r3, #16
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	031b      	lsls	r3, r3, #12
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006342:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800637c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	f043 0307 	orr.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	431a      	orrs	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	609a      	str	r2, [r3, #8]
}
 80063d0:	bf00      	nop
 80063d2:	371c      	adds	r7, #28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2201      	movs	r2, #1
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1a      	ldr	r2, [r3, #32]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	fa01 f303 	lsl.w	r3, r1, r3
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	621a      	str	r2, [r3, #32]
}
 800641a:	bf00      	nop
 800641c:	371c      	adds	r7, #28
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800643c:	2302      	movs	r3, #2
 800643e:	e06d      	b.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a30      	ldr	r2, [pc, #192]	@ (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d004      	beq.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2f      	ldr	r2, [pc, #188]	@ (800652c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800647a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b2:	d01d      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1a      	ldr	r2, [pc, #104]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a15      	ldr	r2, [pc, #84]	@ (800652c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a16      	ldr	r2, [pc, #88]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a15      	ldr	r2, [pc, #84]	@ (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10c      	bne.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	40010000 	.word	0x40010000
 800652c:	40010400 	.word	0x40010400
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40014000 	.word	0x40014000
 8006540:	40001800 	.word	0x40001800

08006544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e040      	b.n	80065d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fb f860 	bl	800162c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2224      	movs	r2, #36	@ 0x24
 8006570:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0201 	bic.w	r2, r2, #1
 8006580:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fe86 	bl	800729c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc1f 	bl	8006dd4 <UART_SetConfig>
 8006596:	4603      	mov	r3, r0
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e01b      	b.n	80065d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 ff05 	bl	80073e0 <UART_CheckIdleState>
 80065d6:	4603      	mov	r3, r0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08a      	sub	sp, #40	@ 0x28
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	603b      	str	r3, [r7, #0]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d177      	bne.n	80066e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Transmit+0x24>
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e070      	b.n	80066ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2221      	movs	r2, #33	@ 0x21
 8006614:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006616:	f7fb fe59 	bl	80022cc <HAL_GetTick>
 800661a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	88fa      	ldrh	r2, [r7, #6]
 8006628:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006634:	d108      	bne.n	8006648 <HAL_UART_Transmit+0x68>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d104      	bne.n	8006648 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	e003      	b.n	8006650 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006650:	e02f      	b.n	80066b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2180      	movs	r1, #128	@ 0x80
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 ff67 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2220      	movs	r2, #32
 800666c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e03b      	b.n	80066ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006686:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	3302      	adds	r3, #2
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e007      	b.n	80066a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	3301      	adds	r3, #1
 800669e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1c9      	bne.n	8006652 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2140      	movs	r1, #64	@ 0x40
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 ff31 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e005      	b.n	80066ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3720      	adds	r7, #32
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b08a      	sub	sp, #40	@ 0x28
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006706:	2b20      	cmp	r3, #32
 8006708:	d132      	bne.n	8006770 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_UART_Receive_IT+0x24>
 8006710:	88fb      	ldrh	r3, [r7, #6]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e02b      	b.n	8006772 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d018      	beq.n	8006760 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	623b      	str	r3, [r7, #32]
 800674e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	69f9      	ldr	r1, [r7, #28]
 8006752:	6a3a      	ldr	r2, [r7, #32]
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	61bb      	str	r3, [r7, #24]
   return(result);
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006760:	88fb      	ldrh	r3, [r7, #6]
 8006762:	461a      	mov	r2, r3
 8006764:	68b9      	ldr	r1, [r7, #8]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 ff50 	bl	800760c <UART_Start_Receive_IT>
 800676c:	4603      	mov	r3, r0
 800676e:	e000      	b.n	8006772 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006770:	2302      	movs	r3, #2
  }
}
 8006772:	4618      	mov	r0, r3
 8006774:	3728      	adds	r7, #40	@ 0x28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b0ba      	sub	sp, #232	@ 0xe8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69db      	ldr	r3, [r3, #28]
 800678a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80067a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80067aa:	4013      	ands	r3, r2
 80067ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80067b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d115      	bne.n	80067e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067bc:	f003 0320 	and.w	r3, r3, #32
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00f      	beq.n	80067e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 82c6 	beq.w	8006d66 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
      }
      return;
 80067e2:	e2c0      	b.n	8006d66 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 8117 	beq.w	8006a1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80067fe:	4b85      	ldr	r3, [pc, #532]	@ (8006a14 <HAL_UART_IRQHandler+0x298>)
 8006800:	4013      	ands	r3, r2
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 810a 	beq.w	8006a1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d011      	beq.n	8006838 <HAL_UART_IRQHandler+0xbc>
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2201      	movs	r2, #1
 8006826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800682e:	f043 0201 	orr.w	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d011      	beq.n	8006868 <HAL_UART_IRQHandler+0xec>
 8006844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2202      	movs	r2, #2
 8006856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800685e:	f043 0204 	orr.w	r2, r3, #4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	d011      	beq.n	8006898 <HAL_UART_IRQHandler+0x11c>
 8006874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2204      	movs	r2, #4
 8006886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800688e:	f043 0202 	orr.w	r2, r3, #2
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d017      	beq.n	80068d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d105      	bne.n	80068bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00b      	beq.n	80068d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2208      	movs	r2, #8
 80068c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068ca:	f043 0208 	orr.w	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d012      	beq.n	8006906 <HAL_UART_IRQHandler+0x18a>
 80068e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00c      	beq.n	8006906 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 822c 	beq.w	8006d6a <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00d      	beq.n	800693a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800691e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d007      	beq.n	800693a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006940:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800694e:	2b40      	cmp	r3, #64	@ 0x40
 8006950:	d005      	beq.n	800695e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006956:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695a:	2b00      	cmp	r3, #0
 800695c:	d04f      	beq.n	80069fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 ff1a 	bl	8007798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696e:	2b40      	cmp	r3, #64	@ 0x40
 8006970:	d141      	bne.n	80069f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800698c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3308      	adds	r3, #8
 800699a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800699e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d9      	bne.n	8006972 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ca:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <HAL_UART_IRQHandler+0x29c>)
 80069cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fc fc8a 	bl	80032ec <HAL_DMA_Abort_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d017      	beq.n	8006a0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	e00f      	b.n	8006a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f9d0 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e00b      	b.n	8006a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f9cc 	bl	8006d94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e007      	b.n	8006a0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f9c8 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006a0c:	e1ad      	b.n	8006d6a <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0e:	bf00      	nop
    return;
 8006a10:	e1ab      	b.n	8006d6a <HAL_UART_IRQHandler+0x5ee>
 8006a12:	bf00      	nop
 8006a14:	04000120 	.word	0x04000120
 8006a18:	08007861 	.word	0x08007861

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	f040 8166 	bne.w	8006cf2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 815f 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8158 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2210      	movs	r2, #16
 8006a48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a54:	2b40      	cmp	r3, #64	@ 0x40
 8006a56:	f040 80d0 	bne.w	8006bfa <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 80ab 	beq.w	8006bc6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	f080 80a3 	bcs.w	8006bc6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a94:	f000 8086 	beq.w	8006ba4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006ac2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006ac6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1da      	bne.n	8006a98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e1      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006b72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b74:	f023 0310 	bic.w	r3, r3, #16
 8006b78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006b86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006b8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e4      	bne.n	8006b64 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fc fb34 	bl	800320c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8f2 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006bc4:	e0d3      	b.n	8006d6e <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	f040 80cc 	bne.w	8006d6e <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be0:	f040 80c5 	bne.w	8006d6e <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f8d8 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
      return;
 8006bf8:	e0b9      	b.n	8006d6e <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80ab 	beq.w	8006d72 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8006c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80a6 	beq.w	8006d72 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	e853 3f00 	ldrex	r3, [r3]
 8006c32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e4      	bne.n	8006c26 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	3308      	adds	r3, #8
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c80:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e3      	bne.n	8006c5c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 0310 	bic.w	r3, r3, #16
 8006cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006cca:	61fb      	str	r3, [r7, #28]
 8006ccc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	69b9      	ldr	r1, [r7, #24]
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e4      	bne.n	8006ca8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f85c 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cf0:	e03f      	b.n	8006d72 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <HAL_UART_IRQHandler+0x5a0>
 8006cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f853 	bl	8006dc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d1a:	e02d      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00e      	beq.n	8006d46 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01c      	beq.n	8006d76 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
    }
    return;
 8006d44:	e017      	b.n	8006d76 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d012      	beq.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
 8006d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00c      	beq.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fd90 	bl	8007884 <UART_EndTransmit_IT>
    return;
 8006d64:	e008      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006d66:	bf00      	nop
 8006d68:	e006      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
    return;
 8006d6a:	bf00      	nop
 8006d6c:	e004      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006d6e:	bf00      	nop
 8006d70:	e002      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <HAL_UART_IRQHandler+0x5fc>
    return;
 8006d76:	bf00      	nop
  }

}
 8006d78:	37e8      	adds	r7, #232	@ 0xe8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db4:	bf00      	nop
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	431a      	orrs	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	69db      	ldr	r3, [r3, #28]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	4ba6      	ldr	r3, [pc, #664]	@ (8007098 <UART_SetConfig+0x2c4>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	6812      	ldr	r2, [r2, #0]
 8006e06:	6979      	ldr	r1, [r7, #20]
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a94      	ldr	r2, [pc, #592]	@ (800709c <UART_SetConfig+0x2c8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d120      	bne.n	8006e92 <UART_SetConfig+0xbe>
 8006e50:	4b93      	ldr	r3, [pc, #588]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d816      	bhi.n	8006e8c <UART_SetConfig+0xb8>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <UART_SetConfig+0x90>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e75 	.word	0x08006e75
 8006e68:	08006e81 	.word	0x08006e81
 8006e6c:	08006e7b 	.word	0x08006e7b
 8006e70:	08006e87 	.word	0x08006e87
 8006e74:	2301      	movs	r3, #1
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e150      	b.n	800711c <UART_SetConfig+0x348>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e14d      	b.n	800711c <UART_SetConfig+0x348>
 8006e80:	2304      	movs	r3, #4
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e14a      	b.n	800711c <UART_SetConfig+0x348>
 8006e86:	2308      	movs	r3, #8
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e147      	b.n	800711c <UART_SetConfig+0x348>
 8006e8c:	2310      	movs	r3, #16
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e144      	b.n	800711c <UART_SetConfig+0x348>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a83      	ldr	r2, [pc, #524]	@ (80070a4 <UART_SetConfig+0x2d0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d132      	bne.n	8006f02 <UART_SetConfig+0x12e>
 8006e9c:	4b80      	ldr	r3, [pc, #512]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea2:	f003 030c 	and.w	r3, r3, #12
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d828      	bhi.n	8006efc <UART_SetConfig+0x128>
 8006eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <UART_SetConfig+0xdc>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006efd 	.word	0x08006efd
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006ef1 	.word	0x08006ef1
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006efd 	.word	0x08006efd
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006eeb 	.word	0x08006eeb
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006efd 	.word	0x08006efd
 8006edc:	08006efd 	.word	0x08006efd
 8006ee0:	08006ef7 	.word	0x08006ef7
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	77fb      	strb	r3, [r7, #31]
 8006ee8:	e118      	b.n	800711c <UART_SetConfig+0x348>
 8006eea:	2302      	movs	r3, #2
 8006eec:	77fb      	strb	r3, [r7, #31]
 8006eee:	e115      	b.n	800711c <UART_SetConfig+0x348>
 8006ef0:	2304      	movs	r3, #4
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e112      	b.n	800711c <UART_SetConfig+0x348>
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e10f      	b.n	800711c <UART_SetConfig+0x348>
 8006efc:	2310      	movs	r3, #16
 8006efe:	77fb      	strb	r3, [r7, #31]
 8006f00:	e10c      	b.n	800711c <UART_SetConfig+0x348>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a68      	ldr	r2, [pc, #416]	@ (80070a8 <UART_SetConfig+0x2d4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d120      	bne.n	8006f4e <UART_SetConfig+0x17a>
 8006f0c:	4b64      	ldr	r3, [pc, #400]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f16:	2b30      	cmp	r3, #48	@ 0x30
 8006f18:	d013      	beq.n	8006f42 <UART_SetConfig+0x16e>
 8006f1a:	2b30      	cmp	r3, #48	@ 0x30
 8006f1c:	d814      	bhi.n	8006f48 <UART_SetConfig+0x174>
 8006f1e:	2b20      	cmp	r3, #32
 8006f20:	d009      	beq.n	8006f36 <UART_SetConfig+0x162>
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d810      	bhi.n	8006f48 <UART_SetConfig+0x174>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <UART_SetConfig+0x15c>
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d006      	beq.n	8006f3c <UART_SetConfig+0x168>
 8006f2e:	e00b      	b.n	8006f48 <UART_SetConfig+0x174>
 8006f30:	2300      	movs	r3, #0
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e0f2      	b.n	800711c <UART_SetConfig+0x348>
 8006f36:	2302      	movs	r3, #2
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e0ef      	b.n	800711c <UART_SetConfig+0x348>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e0ec      	b.n	800711c <UART_SetConfig+0x348>
 8006f42:	2308      	movs	r3, #8
 8006f44:	77fb      	strb	r3, [r7, #31]
 8006f46:	e0e9      	b.n	800711c <UART_SetConfig+0x348>
 8006f48:	2310      	movs	r3, #16
 8006f4a:	77fb      	strb	r3, [r7, #31]
 8006f4c:	e0e6      	b.n	800711c <UART_SetConfig+0x348>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a56      	ldr	r2, [pc, #344]	@ (80070ac <UART_SetConfig+0x2d8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d120      	bne.n	8006f9a <UART_SetConfig+0x1c6>
 8006f58:	4b51      	ldr	r3, [pc, #324]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f64:	d013      	beq.n	8006f8e <UART_SetConfig+0x1ba>
 8006f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f68:	d814      	bhi.n	8006f94 <UART_SetConfig+0x1c0>
 8006f6a:	2b80      	cmp	r3, #128	@ 0x80
 8006f6c:	d009      	beq.n	8006f82 <UART_SetConfig+0x1ae>
 8006f6e:	2b80      	cmp	r3, #128	@ 0x80
 8006f70:	d810      	bhi.n	8006f94 <UART_SetConfig+0x1c0>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <UART_SetConfig+0x1a8>
 8006f76:	2b40      	cmp	r3, #64	@ 0x40
 8006f78:	d006      	beq.n	8006f88 <UART_SetConfig+0x1b4>
 8006f7a:	e00b      	b.n	8006f94 <UART_SetConfig+0x1c0>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e0cc      	b.n	800711c <UART_SetConfig+0x348>
 8006f82:	2302      	movs	r3, #2
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e0c9      	b.n	800711c <UART_SetConfig+0x348>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e0c6      	b.n	800711c <UART_SetConfig+0x348>
 8006f8e:	2308      	movs	r3, #8
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e0c3      	b.n	800711c <UART_SetConfig+0x348>
 8006f94:	2310      	movs	r3, #16
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e0c0      	b.n	800711c <UART_SetConfig+0x348>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a44      	ldr	r2, [pc, #272]	@ (80070b0 <UART_SetConfig+0x2dc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d125      	bne.n	8006ff0 <UART_SetConfig+0x21c>
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb2:	d017      	beq.n	8006fe4 <UART_SetConfig+0x210>
 8006fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb8:	d817      	bhi.n	8006fea <UART_SetConfig+0x216>
 8006fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fbe:	d00b      	beq.n	8006fd8 <UART_SetConfig+0x204>
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc4:	d811      	bhi.n	8006fea <UART_SetConfig+0x216>
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <UART_SetConfig+0x1fe>
 8006fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fce:	d006      	beq.n	8006fde <UART_SetConfig+0x20a>
 8006fd0:	e00b      	b.n	8006fea <UART_SetConfig+0x216>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	77fb      	strb	r3, [r7, #31]
 8006fd6:	e0a1      	b.n	800711c <UART_SetConfig+0x348>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	77fb      	strb	r3, [r7, #31]
 8006fdc:	e09e      	b.n	800711c <UART_SetConfig+0x348>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	77fb      	strb	r3, [r7, #31]
 8006fe2:	e09b      	b.n	800711c <UART_SetConfig+0x348>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	77fb      	strb	r3, [r7, #31]
 8006fe8:	e098      	b.n	800711c <UART_SetConfig+0x348>
 8006fea:	2310      	movs	r3, #16
 8006fec:	77fb      	strb	r3, [r7, #31]
 8006fee:	e095      	b.n	800711c <UART_SetConfig+0x348>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80070b4 <UART_SetConfig+0x2e0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d125      	bne.n	8007046 <UART_SetConfig+0x272>
 8006ffa:	4b29      	ldr	r3, [pc, #164]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007000:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007004:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007008:	d017      	beq.n	800703a <UART_SetConfig+0x266>
 800700a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800700e:	d817      	bhi.n	8007040 <UART_SetConfig+0x26c>
 8007010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007014:	d00b      	beq.n	800702e <UART_SetConfig+0x25a>
 8007016:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800701a:	d811      	bhi.n	8007040 <UART_SetConfig+0x26c>
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <UART_SetConfig+0x254>
 8007020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007024:	d006      	beq.n	8007034 <UART_SetConfig+0x260>
 8007026:	e00b      	b.n	8007040 <UART_SetConfig+0x26c>
 8007028:	2301      	movs	r3, #1
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e076      	b.n	800711c <UART_SetConfig+0x348>
 800702e:	2302      	movs	r3, #2
 8007030:	77fb      	strb	r3, [r7, #31]
 8007032:	e073      	b.n	800711c <UART_SetConfig+0x348>
 8007034:	2304      	movs	r3, #4
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e070      	b.n	800711c <UART_SetConfig+0x348>
 800703a:	2308      	movs	r3, #8
 800703c:	77fb      	strb	r3, [r7, #31]
 800703e:	e06d      	b.n	800711c <UART_SetConfig+0x348>
 8007040:	2310      	movs	r3, #16
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e06a      	b.n	800711c <UART_SetConfig+0x348>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1b      	ldr	r2, [pc, #108]	@ (80070b8 <UART_SetConfig+0x2e4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d138      	bne.n	80070c2 <UART_SetConfig+0x2ee>
 8007050:	4b13      	ldr	r3, [pc, #76]	@ (80070a0 <UART_SetConfig+0x2cc>)
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007056:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800705a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800705e:	d017      	beq.n	8007090 <UART_SetConfig+0x2bc>
 8007060:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007064:	d82a      	bhi.n	80070bc <UART_SetConfig+0x2e8>
 8007066:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800706a:	d00b      	beq.n	8007084 <UART_SetConfig+0x2b0>
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007070:	d824      	bhi.n	80070bc <UART_SetConfig+0x2e8>
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <UART_SetConfig+0x2aa>
 8007076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800707a:	d006      	beq.n	800708a <UART_SetConfig+0x2b6>
 800707c:	e01e      	b.n	80070bc <UART_SetConfig+0x2e8>
 800707e:	2300      	movs	r3, #0
 8007080:	77fb      	strb	r3, [r7, #31]
 8007082:	e04b      	b.n	800711c <UART_SetConfig+0x348>
 8007084:	2302      	movs	r3, #2
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e048      	b.n	800711c <UART_SetConfig+0x348>
 800708a:	2304      	movs	r3, #4
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e045      	b.n	800711c <UART_SetConfig+0x348>
 8007090:	2308      	movs	r3, #8
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e042      	b.n	800711c <UART_SetConfig+0x348>
 8007096:	bf00      	nop
 8007098:	efff69f3 	.word	0xefff69f3
 800709c:	40011000 	.word	0x40011000
 80070a0:	40023800 	.word	0x40023800
 80070a4:	40004400 	.word	0x40004400
 80070a8:	40004800 	.word	0x40004800
 80070ac:	40004c00 	.word	0x40004c00
 80070b0:	40005000 	.word	0x40005000
 80070b4:	40011400 	.word	0x40011400
 80070b8:	40007800 	.word	0x40007800
 80070bc:	2310      	movs	r3, #16
 80070be:	77fb      	strb	r3, [r7, #31]
 80070c0:	e02c      	b.n	800711c <UART_SetConfig+0x348>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a72      	ldr	r2, [pc, #456]	@ (8007290 <UART_SetConfig+0x4bc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d125      	bne.n	8007118 <UART_SetConfig+0x344>
 80070cc:	4b71      	ldr	r3, [pc, #452]	@ (8007294 <UART_SetConfig+0x4c0>)
 80070ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80070d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070da:	d017      	beq.n	800710c <UART_SetConfig+0x338>
 80070dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070e0:	d817      	bhi.n	8007112 <UART_SetConfig+0x33e>
 80070e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e6:	d00b      	beq.n	8007100 <UART_SetConfig+0x32c>
 80070e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ec:	d811      	bhi.n	8007112 <UART_SetConfig+0x33e>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <UART_SetConfig+0x326>
 80070f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070f6:	d006      	beq.n	8007106 <UART_SetConfig+0x332>
 80070f8:	e00b      	b.n	8007112 <UART_SetConfig+0x33e>
 80070fa:	2300      	movs	r3, #0
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e00d      	b.n	800711c <UART_SetConfig+0x348>
 8007100:	2302      	movs	r3, #2
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e00a      	b.n	800711c <UART_SetConfig+0x348>
 8007106:	2304      	movs	r3, #4
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e007      	b.n	800711c <UART_SetConfig+0x348>
 800710c:	2308      	movs	r3, #8
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e004      	b.n	800711c <UART_SetConfig+0x348>
 8007112:	2310      	movs	r3, #16
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e001      	b.n	800711c <UART_SetConfig+0x348>
 8007118:	2310      	movs	r3, #16
 800711a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007124:	d15b      	bne.n	80071de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007126:	7ffb      	ldrb	r3, [r7, #31]
 8007128:	2b08      	cmp	r3, #8
 800712a:	d828      	bhi.n	800717e <UART_SetConfig+0x3aa>
 800712c:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <UART_SetConfig+0x360>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007159 	.word	0x08007159
 8007138:	08007161 	.word	0x08007161
 800713c:	08007169 	.word	0x08007169
 8007140:	0800717f 	.word	0x0800717f
 8007144:	0800716f 	.word	0x0800716f
 8007148:	0800717f 	.word	0x0800717f
 800714c:	0800717f 	.word	0x0800717f
 8007150:	0800717f 	.word	0x0800717f
 8007154:	08007177 	.word	0x08007177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007158:	f7fd f9ee 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 800715c:	61b8      	str	r0, [r7, #24]
        break;
 800715e:	e013      	b.n	8007188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007160:	f7fd f9fe 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 8007164:	61b8      	str	r0, [r7, #24]
        break;
 8007166:	e00f      	b.n	8007188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007168:	4b4b      	ldr	r3, [pc, #300]	@ (8007298 <UART_SetConfig+0x4c4>)
 800716a:	61bb      	str	r3, [r7, #24]
        break;
 800716c:	e00c      	b.n	8007188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716e:	f7fd f911 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8007172:	61b8      	str	r0, [r7, #24]
        break;
 8007174:	e008      	b.n	8007188 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800717a:	61bb      	str	r3, [r7, #24]
        break;
 800717c:	e004      	b.n	8007188 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	77bb      	strb	r3, [r7, #30]
        break;
 8007186:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d074      	beq.n	8007278 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	005a      	lsls	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	441a      	add	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	d916      	bls.n	80071d8 <UART_SetConfig+0x404>
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071b0:	d212      	bcs.n	80071d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f023 030f 	bic.w	r3, r3, #15
 80071ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	085b      	lsrs	r3, r3, #1
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	89fb      	ldrh	r3, [r7, #14]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	89fa      	ldrh	r2, [r7, #14]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	e04f      	b.n	8007278 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	77bb      	strb	r3, [r7, #30]
 80071dc:	e04c      	b.n	8007278 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071de:	7ffb      	ldrb	r3, [r7, #31]
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d828      	bhi.n	8007236 <UART_SetConfig+0x462>
 80071e4:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <UART_SetConfig+0x418>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007221 	.word	0x08007221
 80071f8:	08007237 	.word	0x08007237
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007237 	.word	0x08007237
 8007204:	08007237 	.word	0x08007237
 8007208:	08007237 	.word	0x08007237
 800720c:	0800722f 	.word	0x0800722f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007210:	f7fd f992 	bl	8004538 <HAL_RCC_GetPCLK1Freq>
 8007214:	61b8      	str	r0, [r7, #24]
        break;
 8007216:	e013      	b.n	8007240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007218:	f7fd f9a2 	bl	8004560 <HAL_RCC_GetPCLK2Freq>
 800721c:	61b8      	str	r0, [r7, #24]
        break;
 800721e:	e00f      	b.n	8007240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007220:	4b1d      	ldr	r3, [pc, #116]	@ (8007298 <UART_SetConfig+0x4c4>)
 8007222:	61bb      	str	r3, [r7, #24]
        break;
 8007224:	e00c      	b.n	8007240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007226:	f7fd f8b5 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800722a:	61b8      	str	r0, [r7, #24]
        break;
 800722c:	e008      	b.n	8007240 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800722e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007232:	61bb      	str	r3, [r7, #24]
        break;
 8007234:	e004      	b.n	8007240 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	77bb      	strb	r3, [r7, #30]
        break;
 800723e:	bf00      	nop
    }

    if (pclk != 0U)
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d018      	beq.n	8007278 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	085a      	lsrs	r2, r3, #1
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	fbb2 f3f3 	udiv	r3, r2, r3
 8007258:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b0f      	cmp	r3, #15
 800725e:	d909      	bls.n	8007274 <UART_SetConfig+0x4a0>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007266:	d205      	bcs.n	8007274 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	b29a      	uxth	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60da      	str	r2, [r3, #12]
 8007272:	e001      	b.n	8007278 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007284:	7fbb      	ldrb	r3, [r7, #30]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3720      	adds	r7, #32
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40007c00 	.word	0x40007c00
 8007294:	40023800 	.word	0x40023800
 8007298:	00f42400 	.word	0x00f42400

0800729c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01a      	beq.n	80073b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	430a      	orrs	r2, r1
 8007390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739a:	d10a      	bne.n	80073b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	605a      	str	r2, [r3, #4]
  }
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b098      	sub	sp, #96	@ 0x60
 80073e4:	af02      	add	r7, sp, #8
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073f0:	f7fa ff6c 	bl	80022cc <HAL_GetTick>
 80073f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d12e      	bne.n	8007462 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007404:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800740c:	2200      	movs	r2, #0
 800740e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f88c 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d021      	beq.n	8007462 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800742c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007432:	653b      	str	r3, [r7, #80]	@ 0x50
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	461a      	mov	r2, r3
 800743a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
 800743e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007440:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800744a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e6      	bne.n	800741e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2220      	movs	r2, #32
 8007454:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e062      	b.n	8007528 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b04      	cmp	r3, #4
 800746e:	d149      	bne.n	8007504 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f856 	bl	8007530 <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d03c      	beq.n	8007504 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	623b      	str	r3, [r7, #32]
   return(result);
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800749e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80074aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3308      	adds	r3, #8
 80074c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0301 	bic.w	r3, r3, #1
 80074d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074dc:	61fa      	str	r2, [r7, #28]
 80074de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	69b9      	ldr	r1, [r7, #24]
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e5      	bne.n	80074bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2220      	movs	r2, #32
 80074f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e011      	b.n	8007528 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2220      	movs	r2, #32
 8007508:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2220      	movs	r2, #32
 800750e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3758      	adds	r7, #88	@ 0x58
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	603b      	str	r3, [r7, #0]
 800753c:	4613      	mov	r3, r2
 800753e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007540:	e04f      	b.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007548:	d04b      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800754a:	f7fa febf 	bl	80022cc <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	429a      	cmp	r2, r3
 8007558:	d302      	bcc.n	8007560 <UART_WaitOnFlagUntilTimeout+0x30>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e04e      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d037      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b80      	cmp	r3, #128	@ 0x80
 8007576:	d034      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b40      	cmp	r3, #64	@ 0x40
 800757c:	d031      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d110      	bne.n	80075ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2208      	movs	r2, #8
 8007592:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 f8ff 	bl	8007798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2208      	movs	r2, #8
 800759e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e029      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075bc:	d111      	bne.n	80075e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80075c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 f8e5 	bl	8007798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e00f      	b.n	8007602 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4013      	ands	r3, r2
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d0a0      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800760c:	b480      	push	{r7}
 800760e:	b097      	sub	sp, #92	@ 0x5c
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	88fa      	ldrh	r2, [r7, #6]
 800762c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800763e:	d10e      	bne.n	800765e <UART_Start_Receive_IT+0x52>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d105      	bne.n	8007654 <UART_Start_Receive_IT+0x48>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800764e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007652:	e02d      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	22ff      	movs	r2, #255	@ 0xff
 8007658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800765c:	e028      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10d      	bne.n	8007682 <UART_Start_Receive_IT+0x76>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <UART_Start_Receive_IT+0x6c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	22ff      	movs	r2, #255	@ 0xff
 8007672:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007676:	e01b      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	227f      	movs	r2, #127	@ 0x7f
 800767c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007680:	e016      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800768a:	d10d      	bne.n	80076a8 <UART_Start_Receive_IT+0x9c>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <UART_Start_Receive_IT+0x92>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	227f      	movs	r2, #127	@ 0x7f
 8007698:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800769c:	e008      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	223f      	movs	r2, #63	@ 0x3f
 80076a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80076a6:	e003      	b.n	80076b0 <UART_Start_Receive_IT+0xa4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2222      	movs	r2, #34	@ 0x22
 80076bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3308      	adds	r3, #8
 80076c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3308      	adds	r3, #8
 80076de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80076e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80076e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80076ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e5      	bne.n	80076c0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076fc:	d107      	bne.n	800770e <UART_Start_Receive_IT+0x102>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a21      	ldr	r2, [pc, #132]	@ (8007790 <UART_Start_Receive_IT+0x184>)
 800770a:	669a      	str	r2, [r3, #104]	@ 0x68
 800770c:	e002      	b.n	8007714 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4a20      	ldr	r2, [pc, #128]	@ (8007794 <UART_Start_Receive_IT+0x188>)
 8007712:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d019      	beq.n	8007750 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007724:	e853 3f00 	ldrex	r3, [r3]
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34
 800773c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007742:	e841 2300 	strex	r3, r2, [r1]
 8007746:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1e6      	bne.n	800771c <UART_Start_Receive_IT+0x110>
 800774e:	e018      	b.n	8007782 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	e853 3f00 	ldrex	r3, [r3]
 800775c:	613b      	str	r3, [r7, #16]
   return(result);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f043 0320 	orr.w	r3, r3, #32
 8007764:	653b      	str	r3, [r7, #80]	@ 0x50
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800776e:	623b      	str	r3, [r7, #32]
 8007770:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	69f9      	ldr	r1, [r7, #28]
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	61bb      	str	r3, [r7, #24]
   return(result);
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e6      	bne.n	8007750 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	375c      	adds	r7, #92	@ 0x5c
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	08007a81 	.word	0x08007a81
 8007794:	080078d9 	.word	0x080078d9

08007798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b095      	sub	sp, #84	@ 0x54
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077be:	643b      	str	r3, [r7, #64]	@ 0x40
 80077c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800780a:	2b01      	cmp	r3, #1
 800780c:	d118      	bne.n	8007840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	60bb      	str	r3, [r7, #8]
   return(result);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f023 0310 	bic.w	r3, r3, #16
 8007822:	647b      	str	r3, [r7, #68]	@ 0x44
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782c:	61bb      	str	r3, [r7, #24]
 800782e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6979      	ldr	r1, [r7, #20]
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	613b      	str	r3, [r7, #16]
   return(result);
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e6      	bne.n	800780e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007854:	bf00      	nop
 8007856:	3754      	adds	r7, #84	@ 0x54
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800786c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fa8c 	bl	8006d94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	60bb      	str	r3, [r7, #8]
   return(result);
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078a0:	61fb      	str	r3, [r7, #28]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6979      	ldr	r1, [r7, #20]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	613b      	str	r3, [r7, #16]
   return(result);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7ff fa58 	bl	8006d80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3720      	adds	r7, #32
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b09c      	sub	sp, #112	@ 0x70
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f0:	2b22      	cmp	r3, #34	@ 0x22
 80078f2:	f040 80b9 	bne.w	8007a68 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007900:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007904:	b2d9      	uxtb	r1, r3
 8007906:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800790a:	b2da      	uxtb	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007910:	400a      	ands	r2, r1
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007926:	b29b      	uxth	r3, r3
 8007928:	3b01      	subs	r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007938:	b29b      	uxth	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 809c 	bne.w	8007a78 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007948:	e853 3f00 	ldrex	r3, [r3]
 800794c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800794e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800795e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007960:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800796c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e6      	bne.n	8007940 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007984:	f023 0301 	bic.w	r3, r3, #1
 8007988:	667b      	str	r3, [r7, #100]	@ 0x64
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007992:	647a      	str	r2, [r7, #68]	@ 0x44
 8007994:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e5      	bne.n	8007972 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d018      	beq.n	80079fa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	623b      	str	r3, [r7, #32]
   return(result);
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80079e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80079ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80079f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d12e      	bne.n	8007a60 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f023 0310 	bic.w	r3, r3, #16
 8007a1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a26:	61fb      	str	r3, [r7, #28]
 8007a28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	69b9      	ldr	r1, [r7, #24]
 8007a2c:	69fa      	ldr	r2, [r7, #28]
 8007a2e:	e841 2300 	strex	r3, r2, [r1]
 8007a32:	617b      	str	r3, [r7, #20]
   return(result);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1e6      	bne.n	8007a08 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f003 0310 	and.w	r3, r3, #16
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d103      	bne.n	8007a50 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2210      	movs	r2, #16
 8007a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff f9a5 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a5e:	e00b      	b.n	8007a78 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7f9 fa65 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 8007a66:	e007      	b.n	8007a78 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0208 	orr.w	r2, r2, #8
 8007a76:	619a      	str	r2, [r3, #24]
}
 8007a78:	bf00      	nop
 8007a7a:	3770      	adds	r7, #112	@ 0x70
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b09c      	sub	sp, #112	@ 0x70
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a8e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a98:	2b22      	cmp	r3, #34	@ 0x22
 8007a9a:	f040 80b9 	bne.w	8007c10 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aac:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007aae:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007ab2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007abc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f040 809c 	bne.w	8007c20 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007afc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	461a      	mov	r2, r3
 8007b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b08:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e6      	bne.n	8007ae8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3308      	adds	r3, #8
 8007b38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e5      	bne.n	8007b1a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d018      	beq.n	8007ba2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b90:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d12e      	bne.n	8007c08 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	613b      	str	r3, [r7, #16]
   return(result);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e6      	bne.n	8007bb0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d103      	bne.n	8007bf8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2210      	movs	r2, #16
 8007bf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff f8d1 	bl	8006da8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c06:	e00b      	b.n	8007c20 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7f9 f991 	bl	8000f30 <HAL_UART_RxCpltCallback>
}
 8007c0e:	e007      	b.n	8007c20 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0208 	orr.w	r2, r2, #8
 8007c1e:	619a      	str	r2, [r3, #24]
}
 8007c20:	bf00      	nop
 8007c22:	3770      	adds	r7, #112	@ 0x70
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <atoi>:
 8007c28:	220a      	movs	r2, #10
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	f000 b87a 	b.w	8007d24 <strtol>

08007c30 <_strtol_l.isra.0>:
 8007c30:	2b24      	cmp	r3, #36	@ 0x24
 8007c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c36:	4686      	mov	lr, r0
 8007c38:	4690      	mov	r8, r2
 8007c3a:	d801      	bhi.n	8007c40 <_strtol_l.isra.0+0x10>
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d106      	bne.n	8007c4e <_strtol_l.isra.0+0x1e>
 8007c40:	f000 f8a4 	bl	8007d8c <__errno>
 8007c44:	2316      	movs	r3, #22
 8007c46:	6003      	str	r3, [r0, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4e:	4834      	ldr	r0, [pc, #208]	@ (8007d20 <_strtol_l.isra.0+0xf0>)
 8007c50:	460d      	mov	r5, r1
 8007c52:	462a      	mov	r2, r5
 8007c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c58:	5d06      	ldrb	r6, [r0, r4]
 8007c5a:	f016 0608 	ands.w	r6, r6, #8
 8007c5e:	d1f8      	bne.n	8007c52 <_strtol_l.isra.0+0x22>
 8007c60:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c62:	d110      	bne.n	8007c86 <_strtol_l.isra.0+0x56>
 8007c64:	782c      	ldrb	r4, [r5, #0]
 8007c66:	2601      	movs	r6, #1
 8007c68:	1c95      	adds	r5, r2, #2
 8007c6a:	f033 0210 	bics.w	r2, r3, #16
 8007c6e:	d115      	bne.n	8007c9c <_strtol_l.isra.0+0x6c>
 8007c70:	2c30      	cmp	r4, #48	@ 0x30
 8007c72:	d10d      	bne.n	8007c90 <_strtol_l.isra.0+0x60>
 8007c74:	782a      	ldrb	r2, [r5, #0]
 8007c76:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c7a:	2a58      	cmp	r2, #88	@ 0x58
 8007c7c:	d108      	bne.n	8007c90 <_strtol_l.isra.0+0x60>
 8007c7e:	786c      	ldrb	r4, [r5, #1]
 8007c80:	3502      	adds	r5, #2
 8007c82:	2310      	movs	r3, #16
 8007c84:	e00a      	b.n	8007c9c <_strtol_l.isra.0+0x6c>
 8007c86:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c88:	bf04      	itt	eq
 8007c8a:	782c      	ldrbeq	r4, [r5, #0]
 8007c8c:	1c95      	addeq	r5, r2, #2
 8007c8e:	e7ec      	b.n	8007c6a <_strtol_l.isra.0+0x3a>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1f6      	bne.n	8007c82 <_strtol_l.isra.0+0x52>
 8007c94:	2c30      	cmp	r4, #48	@ 0x30
 8007c96:	bf14      	ite	ne
 8007c98:	230a      	movne	r3, #10
 8007c9a:	2308      	moveq	r3, #8
 8007c9c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007ca0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	fbbc f9f3 	udiv	r9, ip, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cb0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007cb4:	2f09      	cmp	r7, #9
 8007cb6:	d80f      	bhi.n	8007cd8 <_strtol_l.isra.0+0xa8>
 8007cb8:	463c      	mov	r4, r7
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	dd1b      	ble.n	8007cf6 <_strtol_l.isra.0+0xc6>
 8007cbe:	1c57      	adds	r7, r2, #1
 8007cc0:	d007      	beq.n	8007cd2 <_strtol_l.isra.0+0xa2>
 8007cc2:	4581      	cmp	r9, r0
 8007cc4:	d314      	bcc.n	8007cf0 <_strtol_l.isra.0+0xc0>
 8007cc6:	d101      	bne.n	8007ccc <_strtol_l.isra.0+0x9c>
 8007cc8:	45a2      	cmp	sl, r4
 8007cca:	db11      	blt.n	8007cf0 <_strtol_l.isra.0+0xc0>
 8007ccc:	fb00 4003 	mla	r0, r0, r3, r4
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cd6:	e7eb      	b.n	8007cb0 <_strtol_l.isra.0+0x80>
 8007cd8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007cdc:	2f19      	cmp	r7, #25
 8007cde:	d801      	bhi.n	8007ce4 <_strtol_l.isra.0+0xb4>
 8007ce0:	3c37      	subs	r4, #55	@ 0x37
 8007ce2:	e7ea      	b.n	8007cba <_strtol_l.isra.0+0x8a>
 8007ce4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007ce8:	2f19      	cmp	r7, #25
 8007cea:	d804      	bhi.n	8007cf6 <_strtol_l.isra.0+0xc6>
 8007cec:	3c57      	subs	r4, #87	@ 0x57
 8007cee:	e7e4      	b.n	8007cba <_strtol_l.isra.0+0x8a>
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	e7ed      	b.n	8007cd2 <_strtol_l.isra.0+0xa2>
 8007cf6:	1c53      	adds	r3, r2, #1
 8007cf8:	d108      	bne.n	8007d0c <_strtol_l.isra.0+0xdc>
 8007cfa:	2322      	movs	r3, #34	@ 0x22
 8007cfc:	f8ce 3000 	str.w	r3, [lr]
 8007d00:	4660      	mov	r0, ip
 8007d02:	f1b8 0f00 	cmp.w	r8, #0
 8007d06:	d0a0      	beq.n	8007c4a <_strtol_l.isra.0+0x1a>
 8007d08:	1e69      	subs	r1, r5, #1
 8007d0a:	e006      	b.n	8007d1a <_strtol_l.isra.0+0xea>
 8007d0c:	b106      	cbz	r6, 8007d10 <_strtol_l.isra.0+0xe0>
 8007d0e:	4240      	negs	r0, r0
 8007d10:	f1b8 0f00 	cmp.w	r8, #0
 8007d14:	d099      	beq.n	8007c4a <_strtol_l.isra.0+0x1a>
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d1f6      	bne.n	8007d08 <_strtol_l.isra.0+0xd8>
 8007d1a:	f8c8 1000 	str.w	r1, [r8]
 8007d1e:	e794      	b.n	8007c4a <_strtol_l.isra.0+0x1a>
 8007d20:	0800893d 	.word	0x0800893d

08007d24 <strtol>:
 8007d24:	4613      	mov	r3, r2
 8007d26:	460a      	mov	r2, r1
 8007d28:	4601      	mov	r1, r0
 8007d2a:	4802      	ldr	r0, [pc, #8]	@ (8007d34 <strtol+0x10>)
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	f7ff bf7f 	b.w	8007c30 <_strtol_l.isra.0>
 8007d32:	bf00      	nop
 8007d34:	2000004c 	.word	0x2000004c

08007d38 <siprintf>:
 8007d38:	b40e      	push	{r1, r2, r3}
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	b09d      	sub	sp, #116	@ 0x74
 8007d3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007d40:	9002      	str	r0, [sp, #8]
 8007d42:	9006      	str	r0, [sp, #24]
 8007d44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007d48:	480a      	ldr	r0, [pc, #40]	@ (8007d74 <siprintf+0x3c>)
 8007d4a:	9107      	str	r1, [sp, #28]
 8007d4c:	9104      	str	r1, [sp, #16]
 8007d4e:	490a      	ldr	r1, [pc, #40]	@ (8007d78 <siprintf+0x40>)
 8007d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d54:	9105      	str	r1, [sp, #20]
 8007d56:	2400      	movs	r4, #0
 8007d58:	a902      	add	r1, sp, #8
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007d60:	f000 f9aa 	bl	80080b8 <_svfiprintf_r>
 8007d64:	9b02      	ldr	r3, [sp, #8]
 8007d66:	701c      	strb	r4, [r3, #0]
 8007d68:	b01d      	add	sp, #116	@ 0x74
 8007d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6e:	b003      	add	sp, #12
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	2000004c 	.word	0x2000004c
 8007d78:	ffff0208 	.word	0xffff0208

08007d7c <memset>:
 8007d7c:	4402      	add	r2, r0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d100      	bne.n	8007d86 <memset+0xa>
 8007d84:	4770      	bx	lr
 8007d86:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8a:	e7f9      	b.n	8007d80 <memset+0x4>

08007d8c <__errno>:
 8007d8c:	4b01      	ldr	r3, [pc, #4]	@ (8007d94 <__errno+0x8>)
 8007d8e:	6818      	ldr	r0, [r3, #0]
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	2000004c 	.word	0x2000004c

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	@ (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	@ (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	@ (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	@ (8007ddc <__libc_init_array+0x44>)
 8007dac:	f000 fc6c 	bl	8008688 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	08008a78 	.word	0x08008a78
 8007dd4:	08008a78 	.word	0x08008a78
 8007dd8:	08008a78 	.word	0x08008a78
 8007ddc:	08008a7c 	.word	0x08008a7c

08007de0 <__retarget_lock_acquire_recursive>:
 8007de0:	4770      	bx	lr

08007de2 <__retarget_lock_release_recursive>:
 8007de2:	4770      	bx	lr

08007de4 <strcpy>:
 8007de4:	4603      	mov	r3, r0
 8007de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dea:	f803 2b01 	strb.w	r2, [r3], #1
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d1f9      	bne.n	8007de6 <strcpy+0x2>
 8007df2:	4770      	bx	lr

08007df4 <memcpy>:
 8007df4:	440a      	add	r2, r1
 8007df6:	4291      	cmp	r1, r2
 8007df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007dfc:	d100      	bne.n	8007e00 <memcpy+0xc>
 8007dfe:	4770      	bx	lr
 8007e00:	b510      	push	{r4, lr}
 8007e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	d1f9      	bne.n	8007e02 <memcpy+0xe>
 8007e0e:	bd10      	pop	{r4, pc}

08007e10 <_free_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d041      	beq.n	8007e9c <_free_r+0x8c>
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f0c      	subs	r4, r1, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb8      	it	lt
 8007e22:	18e4      	addlt	r4, r4, r3
 8007e24:	f000 f8e0 	bl	8007fe8 <__malloc_lock>
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <_free_r+0x90>)
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x2c>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	4628      	mov	r0, r5
 8007e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e38:	f000 b8dc 	b.w	8007ff4 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x42>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	1821      	adds	r1, r4, r0
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x1e>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x4c>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x42>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1850      	adds	r0, r2, r1
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x6c>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	4401      	add	r1, r0
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x22>
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	4408      	add	r0, r1
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x22>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x74>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x22>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x22>
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000528 	.word	0x20000528

08007ea4 <sbrk_aligned>:
 8007ea4:	b570      	push	{r4, r5, r6, lr}
 8007ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ee4 <sbrk_aligned+0x40>)
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	6831      	ldr	r1, [r6, #0]
 8007eac:	4605      	mov	r5, r0
 8007eae:	b911      	cbnz	r1, 8007eb6 <sbrk_aligned+0x12>
 8007eb0:	f000 fba4 	bl	80085fc <_sbrk_r>
 8007eb4:	6030      	str	r0, [r6, #0]
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 fb9f 	bl	80085fc <_sbrk_r>
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	d103      	bne.n	8007eca <sbrk_aligned+0x26>
 8007ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	bd70      	pop	{r4, r5, r6, pc}
 8007eca:	1cc4      	adds	r4, r0, #3
 8007ecc:	f024 0403 	bic.w	r4, r4, #3
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d0f8      	beq.n	8007ec6 <sbrk_aligned+0x22>
 8007ed4:	1a21      	subs	r1, r4, r0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fb90 	bl	80085fc <_sbrk_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d1f2      	bne.n	8007ec6 <sbrk_aligned+0x22>
 8007ee0:	e7ef      	b.n	8007ec2 <sbrk_aligned+0x1e>
 8007ee2:	bf00      	nop
 8007ee4:	20000524 	.word	0x20000524

08007ee8 <_malloc_r>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4606      	mov	r6, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d904      	bls.n	8007f0e <_malloc_r+0x26>
 8007f04:	230c      	movs	r3, #12
 8007f06:	6033      	str	r3, [r6, #0]
 8007f08:	2000      	movs	r0, #0
 8007f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007fe4 <_malloc_r+0xfc>
 8007f12:	f000 f869 	bl	8007fe8 <__malloc_lock>
 8007f16:	f8d8 3000 	ldr.w	r3, [r8]
 8007f1a:	461c      	mov	r4, r3
 8007f1c:	bb44      	cbnz	r4, 8007f70 <_malloc_r+0x88>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ffbf 	bl	8007ea4 <sbrk_aligned>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	4604      	mov	r4, r0
 8007f2a:	d158      	bne.n	8007fde <_malloc_r+0xf6>
 8007f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f30:	4627      	mov	r7, r4
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d143      	bne.n	8007fbe <_malloc_r+0xd6>
 8007f36:	2c00      	cmp	r4, #0
 8007f38:	d04b      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4630      	mov	r0, r6
 8007f40:	eb04 0903 	add.w	r9, r4, r3
 8007f44:	f000 fb5a 	bl	80085fc <_sbrk_r>
 8007f48:	4581      	cmp	r9, r0
 8007f4a:	d142      	bne.n	8007fd2 <_malloc_r+0xea>
 8007f4c:	6821      	ldr	r1, [r4, #0]
 8007f4e:	1a6d      	subs	r5, r5, r1
 8007f50:	4629      	mov	r1, r5
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7ff ffa6 	bl	8007ea4 <sbrk_aligned>
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d03a      	beq.n	8007fd2 <_malloc_r+0xea>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	442b      	add	r3, r5
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	f8d8 3000 	ldr.w	r3, [r8]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	bb62      	cbnz	r2, 8007fc4 <_malloc_r+0xdc>
 8007f6a:	f8c8 7000 	str.w	r7, [r8]
 8007f6e:	e00f      	b.n	8007f90 <_malloc_r+0xa8>
 8007f70:	6822      	ldr	r2, [r4, #0]
 8007f72:	1b52      	subs	r2, r2, r5
 8007f74:	d420      	bmi.n	8007fb8 <_malloc_r+0xd0>
 8007f76:	2a0b      	cmp	r2, #11
 8007f78:	d917      	bls.n	8007faa <_malloc_r+0xc2>
 8007f7a:	1961      	adds	r1, r4, r5
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	bf18      	it	ne
 8007f82:	6059      	strne	r1, [r3, #4]
 8007f84:	6863      	ldr	r3, [r4, #4]
 8007f86:	bf08      	it	eq
 8007f88:	f8c8 1000 	streq.w	r1, [r8]
 8007f8c:	5162      	str	r2, [r4, r5]
 8007f8e:	604b      	str	r3, [r1, #4]
 8007f90:	4630      	mov	r0, r6
 8007f92:	f000 f82f 	bl	8007ff4 <__malloc_unlock>
 8007f96:	f104 000b 	add.w	r0, r4, #11
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	f020 0007 	bic.w	r0, r0, #7
 8007fa0:	1ac2      	subs	r2, r0, r3
 8007fa2:	bf1c      	itt	ne
 8007fa4:	1a1b      	subne	r3, r3, r0
 8007fa6:	50a3      	strne	r3, [r4, r2]
 8007fa8:	e7af      	b.n	8007f0a <_malloc_r+0x22>
 8007faa:	6862      	ldr	r2, [r4, #4]
 8007fac:	42a3      	cmp	r3, r4
 8007fae:	bf0c      	ite	eq
 8007fb0:	f8c8 2000 	streq.w	r2, [r8]
 8007fb4:	605a      	strne	r2, [r3, #4]
 8007fb6:	e7eb      	b.n	8007f90 <_malloc_r+0xa8>
 8007fb8:	4623      	mov	r3, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7ae      	b.n	8007f1c <_malloc_r+0x34>
 8007fbe:	463c      	mov	r4, r7
 8007fc0:	687f      	ldr	r7, [r7, #4]
 8007fc2:	e7b6      	b.n	8007f32 <_malloc_r+0x4a>
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d1fb      	bne.n	8007fc4 <_malloc_r+0xdc>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6053      	str	r3, [r2, #4]
 8007fd0:	e7de      	b.n	8007f90 <_malloc_r+0xa8>
 8007fd2:	230c      	movs	r3, #12
 8007fd4:	6033      	str	r3, [r6, #0]
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f000 f80c 	bl	8007ff4 <__malloc_unlock>
 8007fdc:	e794      	b.n	8007f08 <_malloc_r+0x20>
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	e7d6      	b.n	8007f90 <_malloc_r+0xa8>
 8007fe2:	bf00      	nop
 8007fe4:	20000528 	.word	0x20000528

08007fe8 <__malloc_lock>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	@ (8007ff0 <__malloc_lock+0x8>)
 8007fea:	f7ff bef9 	b.w	8007de0 <__retarget_lock_acquire_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000520 	.word	0x20000520

08007ff4 <__malloc_unlock>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	@ (8007ffc <__malloc_unlock+0x8>)
 8007ff6:	f7ff bef4 	b.w	8007de2 <__retarget_lock_release_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	20000520 	.word	0x20000520

08008000 <__ssputs_r>:
 8008000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	688e      	ldr	r6, [r1, #8]
 8008006:	461f      	mov	r7, r3
 8008008:	42be      	cmp	r6, r7
 800800a:	680b      	ldr	r3, [r1, #0]
 800800c:	4682      	mov	sl, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4690      	mov	r8, r2
 8008012:	d82d      	bhi.n	8008070 <__ssputs_r+0x70>
 8008014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800801c:	d026      	beq.n	800806c <__ssputs_r+0x6c>
 800801e:	6965      	ldr	r5, [r4, #20]
 8008020:	6909      	ldr	r1, [r1, #16]
 8008022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008026:	eba3 0901 	sub.w	r9, r3, r1
 800802a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800802e:	1c7b      	adds	r3, r7, #1
 8008030:	444b      	add	r3, r9
 8008032:	106d      	asrs	r5, r5, #1
 8008034:	429d      	cmp	r5, r3
 8008036:	bf38      	it	cc
 8008038:	461d      	movcc	r5, r3
 800803a:	0553      	lsls	r3, r2, #21
 800803c:	d527      	bpl.n	800808e <__ssputs_r+0x8e>
 800803e:	4629      	mov	r1, r5
 8008040:	f7ff ff52 	bl	8007ee8 <_malloc_r>
 8008044:	4606      	mov	r6, r0
 8008046:	b360      	cbz	r0, 80080a2 <__ssputs_r+0xa2>
 8008048:	6921      	ldr	r1, [r4, #16]
 800804a:	464a      	mov	r2, r9
 800804c:	f7ff fed2 	bl	8007df4 <memcpy>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6126      	str	r6, [r4, #16]
 800805e:	6165      	str	r5, [r4, #20]
 8008060:	444e      	add	r6, r9
 8008062:	eba5 0509 	sub.w	r5, r5, r9
 8008066:	6026      	str	r6, [r4, #0]
 8008068:	60a5      	str	r5, [r4, #8]
 800806a:	463e      	mov	r6, r7
 800806c:	42be      	cmp	r6, r7
 800806e:	d900      	bls.n	8008072 <__ssputs_r+0x72>
 8008070:	463e      	mov	r6, r7
 8008072:	6820      	ldr	r0, [r4, #0]
 8008074:	4632      	mov	r2, r6
 8008076:	4641      	mov	r1, r8
 8008078:	f000 faa6 	bl	80085c8 <memmove>
 800807c:	68a3      	ldr	r3, [r4, #8]
 800807e:	1b9b      	subs	r3, r3, r6
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	4433      	add	r3, r6
 8008086:	6023      	str	r3, [r4, #0]
 8008088:	2000      	movs	r0, #0
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	462a      	mov	r2, r5
 8008090:	f000 fac4 	bl	800861c <_realloc_r>
 8008094:	4606      	mov	r6, r0
 8008096:	2800      	cmp	r0, #0
 8008098:	d1e0      	bne.n	800805c <__ssputs_r+0x5c>
 800809a:	6921      	ldr	r1, [r4, #16]
 800809c:	4650      	mov	r0, sl
 800809e:	f7ff feb7 	bl	8007e10 <_free_r>
 80080a2:	230c      	movs	r3, #12
 80080a4:	f8ca 3000 	str.w	r3, [sl]
 80080a8:	89a3      	ldrh	r3, [r4, #12]
 80080aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e7e9      	b.n	800808a <__ssputs_r+0x8a>
	...

080080b8 <_svfiprintf_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	4698      	mov	r8, r3
 80080be:	898b      	ldrh	r3, [r1, #12]
 80080c0:	061b      	lsls	r3, r3, #24
 80080c2:	b09d      	sub	sp, #116	@ 0x74
 80080c4:	4607      	mov	r7, r0
 80080c6:	460d      	mov	r5, r1
 80080c8:	4614      	mov	r4, r2
 80080ca:	d510      	bpl.n	80080ee <_svfiprintf_r+0x36>
 80080cc:	690b      	ldr	r3, [r1, #16]
 80080ce:	b973      	cbnz	r3, 80080ee <_svfiprintf_r+0x36>
 80080d0:	2140      	movs	r1, #64	@ 0x40
 80080d2:	f7ff ff09 	bl	8007ee8 <_malloc_r>
 80080d6:	6028      	str	r0, [r5, #0]
 80080d8:	6128      	str	r0, [r5, #16]
 80080da:	b930      	cbnz	r0, 80080ea <_svfiprintf_r+0x32>
 80080dc:	230c      	movs	r3, #12
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b01d      	add	sp, #116	@ 0x74
 80080e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ea:	2340      	movs	r3, #64	@ 0x40
 80080ec:	616b      	str	r3, [r5, #20]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f2:	2320      	movs	r3, #32
 80080f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080fc:	2330      	movs	r3, #48	@ 0x30
 80080fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800829c <_svfiprintf_r+0x1e4>
 8008102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008106:	f04f 0901 	mov.w	r9, #1
 800810a:	4623      	mov	r3, r4
 800810c:	469a      	mov	sl, r3
 800810e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008112:	b10a      	cbz	r2, 8008118 <_svfiprintf_r+0x60>
 8008114:	2a25      	cmp	r2, #37	@ 0x25
 8008116:	d1f9      	bne.n	800810c <_svfiprintf_r+0x54>
 8008118:	ebba 0b04 	subs.w	fp, sl, r4
 800811c:	d00b      	beq.n	8008136 <_svfiprintf_r+0x7e>
 800811e:	465b      	mov	r3, fp
 8008120:	4622      	mov	r2, r4
 8008122:	4629      	mov	r1, r5
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ff6b 	bl	8008000 <__ssputs_r>
 800812a:	3001      	adds	r0, #1
 800812c:	f000 80a7 	beq.w	800827e <_svfiprintf_r+0x1c6>
 8008130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008132:	445a      	add	r2, fp
 8008134:	9209      	str	r2, [sp, #36]	@ 0x24
 8008136:	f89a 3000 	ldrb.w	r3, [sl]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 809f 	beq.w	800827e <_svfiprintf_r+0x1c6>
 8008140:	2300      	movs	r3, #0
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800814a:	f10a 0a01 	add.w	sl, sl, #1
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	9307      	str	r3, [sp, #28]
 8008152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008156:	931a      	str	r3, [sp, #104]	@ 0x68
 8008158:	4654      	mov	r4, sl
 800815a:	2205      	movs	r2, #5
 800815c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008160:	484e      	ldr	r0, [pc, #312]	@ (800829c <_svfiprintf_r+0x1e4>)
 8008162:	f7f8 f86d 	bl	8000240 <memchr>
 8008166:	9a04      	ldr	r2, [sp, #16]
 8008168:	b9d8      	cbnz	r0, 80081a2 <_svfiprintf_r+0xea>
 800816a:	06d0      	lsls	r0, r2, #27
 800816c:	bf44      	itt	mi
 800816e:	2320      	movmi	r3, #32
 8008170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008174:	0711      	lsls	r1, r2, #28
 8008176:	bf44      	itt	mi
 8008178:	232b      	movmi	r3, #43	@ 0x2b
 800817a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b2a      	cmp	r3, #42	@ 0x2a
 8008184:	d015      	beq.n	80081b2 <_svfiprintf_r+0xfa>
 8008186:	9a07      	ldr	r2, [sp, #28]
 8008188:	4654      	mov	r4, sl
 800818a:	2000      	movs	r0, #0
 800818c:	f04f 0c0a 	mov.w	ip, #10
 8008190:	4621      	mov	r1, r4
 8008192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008196:	3b30      	subs	r3, #48	@ 0x30
 8008198:	2b09      	cmp	r3, #9
 800819a:	d94b      	bls.n	8008234 <_svfiprintf_r+0x17c>
 800819c:	b1b0      	cbz	r0, 80081cc <_svfiprintf_r+0x114>
 800819e:	9207      	str	r2, [sp, #28]
 80081a0:	e014      	b.n	80081cc <_svfiprintf_r+0x114>
 80081a2:	eba0 0308 	sub.w	r3, r0, r8
 80081a6:	fa09 f303 	lsl.w	r3, r9, r3
 80081aa:	4313      	orrs	r3, r2
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	46a2      	mov	sl, r4
 80081b0:	e7d2      	b.n	8008158 <_svfiprintf_r+0xa0>
 80081b2:	9b03      	ldr	r3, [sp, #12]
 80081b4:	1d19      	adds	r1, r3, #4
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bfbb      	ittet	lt
 80081be:	425b      	neglt	r3, r3
 80081c0:	f042 0202 	orrlt.w	r2, r2, #2
 80081c4:	9307      	strge	r3, [sp, #28]
 80081c6:	9307      	strlt	r3, [sp, #28]
 80081c8:	bfb8      	it	lt
 80081ca:	9204      	strlt	r2, [sp, #16]
 80081cc:	7823      	ldrb	r3, [r4, #0]
 80081ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80081d0:	d10a      	bne.n	80081e8 <_svfiprintf_r+0x130>
 80081d2:	7863      	ldrb	r3, [r4, #1]
 80081d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80081d6:	d132      	bne.n	800823e <_svfiprintf_r+0x186>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	9203      	str	r2, [sp, #12]
 80081e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081e4:	3402      	adds	r4, #2
 80081e6:	9305      	str	r3, [sp, #20]
 80081e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80082ac <_svfiprintf_r+0x1f4>
 80081ec:	7821      	ldrb	r1, [r4, #0]
 80081ee:	2203      	movs	r2, #3
 80081f0:	4650      	mov	r0, sl
 80081f2:	f7f8 f825 	bl	8000240 <memchr>
 80081f6:	b138      	cbz	r0, 8008208 <_svfiprintf_r+0x150>
 80081f8:	9b04      	ldr	r3, [sp, #16]
 80081fa:	eba0 000a 	sub.w	r0, r0, sl
 80081fe:	2240      	movs	r2, #64	@ 0x40
 8008200:	4082      	lsls	r2, r0
 8008202:	4313      	orrs	r3, r2
 8008204:	3401      	adds	r4, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	4824      	ldr	r0, [pc, #144]	@ (80082a0 <_svfiprintf_r+0x1e8>)
 800820e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008212:	2206      	movs	r2, #6
 8008214:	f7f8 f814 	bl	8000240 <memchr>
 8008218:	2800      	cmp	r0, #0
 800821a:	d036      	beq.n	800828a <_svfiprintf_r+0x1d2>
 800821c:	4b21      	ldr	r3, [pc, #132]	@ (80082a4 <_svfiprintf_r+0x1ec>)
 800821e:	bb1b      	cbnz	r3, 8008268 <_svfiprintf_r+0x1b0>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	3307      	adds	r3, #7
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	3308      	adds	r3, #8
 800822a:	9303      	str	r3, [sp, #12]
 800822c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822e:	4433      	add	r3, r6
 8008230:	9309      	str	r3, [sp, #36]	@ 0x24
 8008232:	e76a      	b.n	800810a <_svfiprintf_r+0x52>
 8008234:	fb0c 3202 	mla	r2, ip, r2, r3
 8008238:	460c      	mov	r4, r1
 800823a:	2001      	movs	r0, #1
 800823c:	e7a8      	b.n	8008190 <_svfiprintf_r+0xd8>
 800823e:	2300      	movs	r3, #0
 8008240:	3401      	adds	r4, #1
 8008242:	9305      	str	r3, [sp, #20]
 8008244:	4619      	mov	r1, r3
 8008246:	f04f 0c0a 	mov.w	ip, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008250:	3a30      	subs	r2, #48	@ 0x30
 8008252:	2a09      	cmp	r2, #9
 8008254:	d903      	bls.n	800825e <_svfiprintf_r+0x1a6>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0c6      	beq.n	80081e8 <_svfiprintf_r+0x130>
 800825a:	9105      	str	r1, [sp, #20]
 800825c:	e7c4      	b.n	80081e8 <_svfiprintf_r+0x130>
 800825e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008262:	4604      	mov	r4, r0
 8008264:	2301      	movs	r3, #1
 8008266:	e7f0      	b.n	800824a <_svfiprintf_r+0x192>
 8008268:	ab03      	add	r3, sp, #12
 800826a:	9300      	str	r3, [sp, #0]
 800826c:	462a      	mov	r2, r5
 800826e:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <_svfiprintf_r+0x1f0>)
 8008270:	a904      	add	r1, sp, #16
 8008272:	4638      	mov	r0, r7
 8008274:	f3af 8000 	nop.w
 8008278:	1c42      	adds	r2, r0, #1
 800827a:	4606      	mov	r6, r0
 800827c:	d1d6      	bne.n	800822c <_svfiprintf_r+0x174>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	065b      	lsls	r3, r3, #25
 8008282:	f53f af2d 	bmi.w	80080e0 <_svfiprintf_r+0x28>
 8008286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008288:	e72c      	b.n	80080e4 <_svfiprintf_r+0x2c>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b05      	ldr	r3, [pc, #20]	@ (80082a8 <_svfiprintf_r+0x1f0>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4638      	mov	r0, r7
 8008296:	f000 f879 	bl	800838c <_printf_i>
 800829a:	e7ed      	b.n	8008278 <_svfiprintf_r+0x1c0>
 800829c:	08008a3d 	.word	0x08008a3d
 80082a0:	08008a47 	.word	0x08008a47
 80082a4:	00000000 	.word	0x00000000
 80082a8:	08008001 	.word	0x08008001
 80082ac:	08008a43 	.word	0x08008a43

080082b0 <_printf_common>:
 80082b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b4:	4616      	mov	r6, r2
 80082b6:	4698      	mov	r8, r3
 80082b8:	688a      	ldr	r2, [r1, #8]
 80082ba:	690b      	ldr	r3, [r1, #16]
 80082bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082c0:	4293      	cmp	r3, r2
 80082c2:	bfb8      	it	lt
 80082c4:	4613      	movlt	r3, r2
 80082c6:	6033      	str	r3, [r6, #0]
 80082c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082cc:	4607      	mov	r7, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	b10a      	cbz	r2, 80082d6 <_printf_common+0x26>
 80082d2:	3301      	adds	r3, #1
 80082d4:	6033      	str	r3, [r6, #0]
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	0699      	lsls	r1, r3, #26
 80082da:	bf42      	ittt	mi
 80082dc:	6833      	ldrmi	r3, [r6, #0]
 80082de:	3302      	addmi	r3, #2
 80082e0:	6033      	strmi	r3, [r6, #0]
 80082e2:	6825      	ldr	r5, [r4, #0]
 80082e4:	f015 0506 	ands.w	r5, r5, #6
 80082e8:	d106      	bne.n	80082f8 <_printf_common+0x48>
 80082ea:	f104 0a19 	add.w	sl, r4, #25
 80082ee:	68e3      	ldr	r3, [r4, #12]
 80082f0:	6832      	ldr	r2, [r6, #0]
 80082f2:	1a9b      	subs	r3, r3, r2
 80082f4:	42ab      	cmp	r3, r5
 80082f6:	dc26      	bgt.n	8008346 <_printf_common+0x96>
 80082f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082fc:	6822      	ldr	r2, [r4, #0]
 80082fe:	3b00      	subs	r3, #0
 8008300:	bf18      	it	ne
 8008302:	2301      	movne	r3, #1
 8008304:	0692      	lsls	r2, r2, #26
 8008306:	d42b      	bmi.n	8008360 <_printf_common+0xb0>
 8008308:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800830c:	4641      	mov	r1, r8
 800830e:	4638      	mov	r0, r7
 8008310:	47c8      	blx	r9
 8008312:	3001      	adds	r0, #1
 8008314:	d01e      	beq.n	8008354 <_printf_common+0xa4>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	6922      	ldr	r2, [r4, #16]
 800831a:	f003 0306 	and.w	r3, r3, #6
 800831e:	2b04      	cmp	r3, #4
 8008320:	bf02      	ittt	eq
 8008322:	68e5      	ldreq	r5, [r4, #12]
 8008324:	6833      	ldreq	r3, [r6, #0]
 8008326:	1aed      	subeq	r5, r5, r3
 8008328:	68a3      	ldr	r3, [r4, #8]
 800832a:	bf0c      	ite	eq
 800832c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008330:	2500      	movne	r5, #0
 8008332:	4293      	cmp	r3, r2
 8008334:	bfc4      	itt	gt
 8008336:	1a9b      	subgt	r3, r3, r2
 8008338:	18ed      	addgt	r5, r5, r3
 800833a:	2600      	movs	r6, #0
 800833c:	341a      	adds	r4, #26
 800833e:	42b5      	cmp	r5, r6
 8008340:	d11a      	bne.n	8008378 <_printf_common+0xc8>
 8008342:	2000      	movs	r0, #0
 8008344:	e008      	b.n	8008358 <_printf_common+0xa8>
 8008346:	2301      	movs	r3, #1
 8008348:	4652      	mov	r2, sl
 800834a:	4641      	mov	r1, r8
 800834c:	4638      	mov	r0, r7
 800834e:	47c8      	blx	r9
 8008350:	3001      	adds	r0, #1
 8008352:	d103      	bne.n	800835c <_printf_common+0xac>
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835c:	3501      	adds	r5, #1
 800835e:	e7c6      	b.n	80082ee <_printf_common+0x3e>
 8008360:	18e1      	adds	r1, r4, r3
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	2030      	movs	r0, #48	@ 0x30
 8008366:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800836a:	4422      	add	r2, r4
 800836c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008370:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008374:	3302      	adds	r3, #2
 8008376:	e7c7      	b.n	8008308 <_printf_common+0x58>
 8008378:	2301      	movs	r3, #1
 800837a:	4622      	mov	r2, r4
 800837c:	4641      	mov	r1, r8
 800837e:	4638      	mov	r0, r7
 8008380:	47c8      	blx	r9
 8008382:	3001      	adds	r0, #1
 8008384:	d0e6      	beq.n	8008354 <_printf_common+0xa4>
 8008386:	3601      	adds	r6, #1
 8008388:	e7d9      	b.n	800833e <_printf_common+0x8e>
	...

0800838c <_printf_i>:
 800838c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008390:	7e0f      	ldrb	r7, [r1, #24]
 8008392:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008394:	2f78      	cmp	r7, #120	@ 0x78
 8008396:	4691      	mov	r9, r2
 8008398:	4680      	mov	r8, r0
 800839a:	460c      	mov	r4, r1
 800839c:	469a      	mov	sl, r3
 800839e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80083a2:	d807      	bhi.n	80083b4 <_printf_i+0x28>
 80083a4:	2f62      	cmp	r7, #98	@ 0x62
 80083a6:	d80a      	bhi.n	80083be <_printf_i+0x32>
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	f000 80d1 	beq.w	8008550 <_printf_i+0x1c4>
 80083ae:	2f58      	cmp	r7, #88	@ 0x58
 80083b0:	f000 80b8 	beq.w	8008524 <_printf_i+0x198>
 80083b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083bc:	e03a      	b.n	8008434 <_printf_i+0xa8>
 80083be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083c2:	2b15      	cmp	r3, #21
 80083c4:	d8f6      	bhi.n	80083b4 <_printf_i+0x28>
 80083c6:	a101      	add	r1, pc, #4	@ (adr r1, 80083cc <_printf_i+0x40>)
 80083c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083cc:	08008425 	.word	0x08008425
 80083d0:	08008439 	.word	0x08008439
 80083d4:	080083b5 	.word	0x080083b5
 80083d8:	080083b5 	.word	0x080083b5
 80083dc:	080083b5 	.word	0x080083b5
 80083e0:	080083b5 	.word	0x080083b5
 80083e4:	08008439 	.word	0x08008439
 80083e8:	080083b5 	.word	0x080083b5
 80083ec:	080083b5 	.word	0x080083b5
 80083f0:	080083b5 	.word	0x080083b5
 80083f4:	080083b5 	.word	0x080083b5
 80083f8:	08008537 	.word	0x08008537
 80083fc:	08008463 	.word	0x08008463
 8008400:	080084f1 	.word	0x080084f1
 8008404:	080083b5 	.word	0x080083b5
 8008408:	080083b5 	.word	0x080083b5
 800840c:	08008559 	.word	0x08008559
 8008410:	080083b5 	.word	0x080083b5
 8008414:	08008463 	.word	0x08008463
 8008418:	080083b5 	.word	0x080083b5
 800841c:	080083b5 	.word	0x080083b5
 8008420:	080084f9 	.word	0x080084f9
 8008424:	6833      	ldr	r3, [r6, #0]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6032      	str	r2, [r6, #0]
 800842c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008430:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008434:	2301      	movs	r3, #1
 8008436:	e09c      	b.n	8008572 <_printf_i+0x1e6>
 8008438:	6833      	ldr	r3, [r6, #0]
 800843a:	6820      	ldr	r0, [r4, #0]
 800843c:	1d19      	adds	r1, r3, #4
 800843e:	6031      	str	r1, [r6, #0]
 8008440:	0606      	lsls	r6, r0, #24
 8008442:	d501      	bpl.n	8008448 <_printf_i+0xbc>
 8008444:	681d      	ldr	r5, [r3, #0]
 8008446:	e003      	b.n	8008450 <_printf_i+0xc4>
 8008448:	0645      	lsls	r5, r0, #25
 800844a:	d5fb      	bpl.n	8008444 <_printf_i+0xb8>
 800844c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008450:	2d00      	cmp	r5, #0
 8008452:	da03      	bge.n	800845c <_printf_i+0xd0>
 8008454:	232d      	movs	r3, #45	@ 0x2d
 8008456:	426d      	negs	r5, r5
 8008458:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800845c:	4858      	ldr	r0, [pc, #352]	@ (80085c0 <_printf_i+0x234>)
 800845e:	230a      	movs	r3, #10
 8008460:	e011      	b.n	8008486 <_printf_i+0xfa>
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	6833      	ldr	r3, [r6, #0]
 8008466:	0608      	lsls	r0, r1, #24
 8008468:	f853 5b04 	ldr.w	r5, [r3], #4
 800846c:	d402      	bmi.n	8008474 <_printf_i+0xe8>
 800846e:	0649      	lsls	r1, r1, #25
 8008470:	bf48      	it	mi
 8008472:	b2ad      	uxthmi	r5, r5
 8008474:	2f6f      	cmp	r7, #111	@ 0x6f
 8008476:	4852      	ldr	r0, [pc, #328]	@ (80085c0 <_printf_i+0x234>)
 8008478:	6033      	str	r3, [r6, #0]
 800847a:	bf14      	ite	ne
 800847c:	230a      	movne	r3, #10
 800847e:	2308      	moveq	r3, #8
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008486:	6866      	ldr	r6, [r4, #4]
 8008488:	60a6      	str	r6, [r4, #8]
 800848a:	2e00      	cmp	r6, #0
 800848c:	db05      	blt.n	800849a <_printf_i+0x10e>
 800848e:	6821      	ldr	r1, [r4, #0]
 8008490:	432e      	orrs	r6, r5
 8008492:	f021 0104 	bic.w	r1, r1, #4
 8008496:	6021      	str	r1, [r4, #0]
 8008498:	d04b      	beq.n	8008532 <_printf_i+0x1a6>
 800849a:	4616      	mov	r6, r2
 800849c:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a0:	fb03 5711 	mls	r7, r3, r1, r5
 80084a4:	5dc7      	ldrb	r7, [r0, r7]
 80084a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084aa:	462f      	mov	r7, r5
 80084ac:	42bb      	cmp	r3, r7
 80084ae:	460d      	mov	r5, r1
 80084b0:	d9f4      	bls.n	800849c <_printf_i+0x110>
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d10b      	bne.n	80084ce <_printf_i+0x142>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	07df      	lsls	r7, r3, #31
 80084ba:	d508      	bpl.n	80084ce <_printf_i+0x142>
 80084bc:	6923      	ldr	r3, [r4, #16]
 80084be:	6861      	ldr	r1, [r4, #4]
 80084c0:	4299      	cmp	r1, r3
 80084c2:	bfde      	ittt	le
 80084c4:	2330      	movle	r3, #48	@ 0x30
 80084c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084ce:	1b92      	subs	r2, r2, r6
 80084d0:	6122      	str	r2, [r4, #16]
 80084d2:	f8cd a000 	str.w	sl, [sp]
 80084d6:	464b      	mov	r3, r9
 80084d8:	aa03      	add	r2, sp, #12
 80084da:	4621      	mov	r1, r4
 80084dc:	4640      	mov	r0, r8
 80084de:	f7ff fee7 	bl	80082b0 <_printf_common>
 80084e2:	3001      	adds	r0, #1
 80084e4:	d14a      	bne.n	800857c <_printf_i+0x1f0>
 80084e6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ea:	b004      	add	sp, #16
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	f043 0320 	orr.w	r3, r3, #32
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	4832      	ldr	r0, [pc, #200]	@ (80085c4 <_printf_i+0x238>)
 80084fa:	2778      	movs	r7, #120	@ 0x78
 80084fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	6831      	ldr	r1, [r6, #0]
 8008504:	061f      	lsls	r7, r3, #24
 8008506:	f851 5b04 	ldr.w	r5, [r1], #4
 800850a:	d402      	bmi.n	8008512 <_printf_i+0x186>
 800850c:	065f      	lsls	r7, r3, #25
 800850e:	bf48      	it	mi
 8008510:	b2ad      	uxthmi	r5, r5
 8008512:	6031      	str	r1, [r6, #0]
 8008514:	07d9      	lsls	r1, r3, #31
 8008516:	bf44      	itt	mi
 8008518:	f043 0320 	orrmi.w	r3, r3, #32
 800851c:	6023      	strmi	r3, [r4, #0]
 800851e:	b11d      	cbz	r5, 8008528 <_printf_i+0x19c>
 8008520:	2310      	movs	r3, #16
 8008522:	e7ad      	b.n	8008480 <_printf_i+0xf4>
 8008524:	4826      	ldr	r0, [pc, #152]	@ (80085c0 <_printf_i+0x234>)
 8008526:	e7e9      	b.n	80084fc <_printf_i+0x170>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	f023 0320 	bic.w	r3, r3, #32
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	e7f6      	b.n	8008520 <_printf_i+0x194>
 8008532:	4616      	mov	r6, r2
 8008534:	e7bd      	b.n	80084b2 <_printf_i+0x126>
 8008536:	6833      	ldr	r3, [r6, #0]
 8008538:	6825      	ldr	r5, [r4, #0]
 800853a:	6961      	ldr	r1, [r4, #20]
 800853c:	1d18      	adds	r0, r3, #4
 800853e:	6030      	str	r0, [r6, #0]
 8008540:	062e      	lsls	r6, r5, #24
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	d501      	bpl.n	800854a <_printf_i+0x1be>
 8008546:	6019      	str	r1, [r3, #0]
 8008548:	e002      	b.n	8008550 <_printf_i+0x1c4>
 800854a:	0668      	lsls	r0, r5, #25
 800854c:	d5fb      	bpl.n	8008546 <_printf_i+0x1ba>
 800854e:	8019      	strh	r1, [r3, #0]
 8008550:	2300      	movs	r3, #0
 8008552:	6123      	str	r3, [r4, #16]
 8008554:	4616      	mov	r6, r2
 8008556:	e7bc      	b.n	80084d2 <_printf_i+0x146>
 8008558:	6833      	ldr	r3, [r6, #0]
 800855a:	1d1a      	adds	r2, r3, #4
 800855c:	6032      	str	r2, [r6, #0]
 800855e:	681e      	ldr	r6, [r3, #0]
 8008560:	6862      	ldr	r2, [r4, #4]
 8008562:	2100      	movs	r1, #0
 8008564:	4630      	mov	r0, r6
 8008566:	f7f7 fe6b 	bl	8000240 <memchr>
 800856a:	b108      	cbz	r0, 8008570 <_printf_i+0x1e4>
 800856c:	1b80      	subs	r0, r0, r6
 800856e:	6060      	str	r0, [r4, #4]
 8008570:	6863      	ldr	r3, [r4, #4]
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	2300      	movs	r3, #0
 8008576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800857a:	e7aa      	b.n	80084d2 <_printf_i+0x146>
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	4632      	mov	r2, r6
 8008580:	4649      	mov	r1, r9
 8008582:	4640      	mov	r0, r8
 8008584:	47d0      	blx	sl
 8008586:	3001      	adds	r0, #1
 8008588:	d0ad      	beq.n	80084e6 <_printf_i+0x15a>
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	079b      	lsls	r3, r3, #30
 800858e:	d413      	bmi.n	80085b8 <_printf_i+0x22c>
 8008590:	68e0      	ldr	r0, [r4, #12]
 8008592:	9b03      	ldr	r3, [sp, #12]
 8008594:	4298      	cmp	r0, r3
 8008596:	bfb8      	it	lt
 8008598:	4618      	movlt	r0, r3
 800859a:	e7a6      	b.n	80084ea <_printf_i+0x15e>
 800859c:	2301      	movs	r3, #1
 800859e:	4632      	mov	r2, r6
 80085a0:	4649      	mov	r1, r9
 80085a2:	4640      	mov	r0, r8
 80085a4:	47d0      	blx	sl
 80085a6:	3001      	adds	r0, #1
 80085a8:	d09d      	beq.n	80084e6 <_printf_i+0x15a>
 80085aa:	3501      	adds	r5, #1
 80085ac:	68e3      	ldr	r3, [r4, #12]
 80085ae:	9903      	ldr	r1, [sp, #12]
 80085b0:	1a5b      	subs	r3, r3, r1
 80085b2:	42ab      	cmp	r3, r5
 80085b4:	dcf2      	bgt.n	800859c <_printf_i+0x210>
 80085b6:	e7eb      	b.n	8008590 <_printf_i+0x204>
 80085b8:	2500      	movs	r5, #0
 80085ba:	f104 0619 	add.w	r6, r4, #25
 80085be:	e7f5      	b.n	80085ac <_printf_i+0x220>
 80085c0:	08008a4e 	.word	0x08008a4e
 80085c4:	08008a5f 	.word	0x08008a5f

080085c8 <memmove>:
 80085c8:	4288      	cmp	r0, r1
 80085ca:	b510      	push	{r4, lr}
 80085cc:	eb01 0402 	add.w	r4, r1, r2
 80085d0:	d902      	bls.n	80085d8 <memmove+0x10>
 80085d2:	4284      	cmp	r4, r0
 80085d4:	4623      	mov	r3, r4
 80085d6:	d807      	bhi.n	80085e8 <memmove+0x20>
 80085d8:	1e43      	subs	r3, r0, #1
 80085da:	42a1      	cmp	r1, r4
 80085dc:	d008      	beq.n	80085f0 <memmove+0x28>
 80085de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085e6:	e7f8      	b.n	80085da <memmove+0x12>
 80085e8:	4402      	add	r2, r0
 80085ea:	4601      	mov	r1, r0
 80085ec:	428a      	cmp	r2, r1
 80085ee:	d100      	bne.n	80085f2 <memmove+0x2a>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085fa:	e7f7      	b.n	80085ec <memmove+0x24>

080085fc <_sbrk_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d06      	ldr	r5, [pc, #24]	@ (8008618 <_sbrk_r+0x1c>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	f7f8 fe66 	bl	80012d8 <_sbrk>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_sbrk_r+0x1a>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_sbrk_r+0x1a>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	2000051c 	.word	0x2000051c

0800861c <_realloc_r>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	4607      	mov	r7, r0
 8008622:	4614      	mov	r4, r2
 8008624:	460d      	mov	r5, r1
 8008626:	b921      	cbnz	r1, 8008632 <_realloc_r+0x16>
 8008628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800862c:	4611      	mov	r1, r2
 800862e:	f7ff bc5b 	b.w	8007ee8 <_malloc_r>
 8008632:	b92a      	cbnz	r2, 8008640 <_realloc_r+0x24>
 8008634:	f7ff fbec 	bl	8007e10 <_free_r>
 8008638:	4625      	mov	r5, r4
 800863a:	4628      	mov	r0, r5
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	f000 f81a 	bl	8008678 <_malloc_usable_size_r>
 8008644:	4284      	cmp	r4, r0
 8008646:	4606      	mov	r6, r0
 8008648:	d802      	bhi.n	8008650 <_realloc_r+0x34>
 800864a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800864e:	d8f4      	bhi.n	800863a <_realloc_r+0x1e>
 8008650:	4621      	mov	r1, r4
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff fc48 	bl	8007ee8 <_malloc_r>
 8008658:	4680      	mov	r8, r0
 800865a:	b908      	cbnz	r0, 8008660 <_realloc_r+0x44>
 800865c:	4645      	mov	r5, r8
 800865e:	e7ec      	b.n	800863a <_realloc_r+0x1e>
 8008660:	42b4      	cmp	r4, r6
 8008662:	4622      	mov	r2, r4
 8008664:	4629      	mov	r1, r5
 8008666:	bf28      	it	cs
 8008668:	4632      	movcs	r2, r6
 800866a:	f7ff fbc3 	bl	8007df4 <memcpy>
 800866e:	4629      	mov	r1, r5
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff fbcd 	bl	8007e10 <_free_r>
 8008676:	e7f1      	b.n	800865c <_realloc_r+0x40>

08008678 <_malloc_usable_size_r>:
 8008678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867c:	1f18      	subs	r0, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfbc      	itt	lt
 8008682:	580b      	ldrlt	r3, [r1, r0]
 8008684:	18c0      	addlt	r0, r0, r3
 8008686:	4770      	bx	lr

08008688 <_init>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr

08008694 <_fini>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr
